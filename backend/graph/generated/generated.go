// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"ads-manager/graph/model"
	"bytes"
	"context"
	"errors"
	"io"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AdsContent() AdsContentResolver
	Audience() AudienceResolver
	Campaign() CampaignResolver
	CampaignHistories() CampaignHistoriesResolver
	Mutation() MutationResolver
	PaymentDetail() PaymentDetailResolver
	PlacementContent() PlacementContentResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AdsAccount struct {
		AccountType       func(childComplexity int) int
		AdsAccountMembers func(childComplexity int) int
		AdsAccountName    func(childComplexity int) int
		ApproverMode      func(childComplexity int) int
		Business          func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		ID                func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		User              func(childComplexity int) int
		WalletAdID        func(childComplexity int) int
	}

	AdsAccountInvitation struct {
		AdsAccountID        func(childComplexity int) int
		AdsInvitationStatus func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Role                func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UserInvitedID       func(childComplexity int) int
		UserInviterID       func(childComplexity int) int
	}

	AdsAccountMember struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		IsApprover func(childComplexity int) int
		IsMe       func(childComplexity int) int
		Role       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		User       func(childComplexity int) int
	}

	AdsAccountReceivingDiscount struct {
		AdsAccountID                func(childComplexity int) int
		AdsPlacementID              func(childComplexity int) int
		PlacementAdsAccountDsicount func(childComplexity int) int
	}

	AdsContent struct {
		AdsAccountID      func(childComplexity int) int
		AdsContentName    func(childComplexity int) int
		Campaigns         func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		ID                func(childComplexity int) int
		PlacementContents func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	AdsPlacement struct {
		AdsAccountReceivingDiscounts   func(childComplexity int) int
		AdsAccountRestrictedPlacements func(childComplexity int) int
		AdsPlacementName               func(childComplexity int) int
		BaseClickCost                  func(childComplexity int) int
		BaseConversionCost             func(childComplexity int) int
		BaseDurationCost               func(childComplexity int) int
		BaseViewCost                   func(childComplexity int) int
		ClickCostIncrement             func(childComplexity int) int
		ContentProperties              func(childComplexity int) int
		ConversionCostIncrement        func(childComplexity int) int
		CreatedAt                      func(childComplexity int) int
		Description                    func(childComplexity int) int
		DiscountPercentage             func(childComplexity int) int
		HTMLView                       func(childComplexity int) int
		ID                             func(childComplexity int) int
		IsActive                       func(childComplexity int) int
		IsClicked                      func(childComplexity int) int
		IsConversion                   func(childComplexity int) int
		IsDiscountAll                  func(childComplexity int) int
		IsRestricted                   func(childComplexity int) int
		RestrictedType                 func(childComplexity int) int
		SpecialFilterProperties        func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		ViewCostIncrement              func(childComplexity int) int
	}

	Audience struct {
		Address      func(childComplexity int) int
		AdsAccountID func(childComplexity int) int
		Age          func(childComplexity int) int
		AudienceName func(childComplexity int) int
		Campaigns    func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Gender       func(childComplexity int) int
		ID           func(childComplexity int) int
		Interest     func(childComplexity int) int
		Locations    func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	Business struct {
		ID    func(childComplexity int) int
		Name  func(childComplexity int) int
		Owner func(childComplexity int) int
	}

	Campaign struct {
		AdsAccountID      func(childComplexity int) int
		AdsContent        func(childComplexity int) int
		AdsContentID      func(childComplexity int) int
		Audience          func(childComplexity int) int
		AudienceID        func(childComplexity int) int
		BudgetLimit       func(childComplexity int) int
		CampaignHistories func(childComplexity int) int
		CampaignName      func(childComplexity int) int
		CampaignObjective func(childComplexity int) int
		CampaignStatus    func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Description       func(childComplexity int) int
		EndDate           func(childComplexity int) int
		ID                func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	CampaignHistories struct {
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Reason         func(childComplexity int) int
		RecordedStatus func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		User           func(childComplexity int) int
		UserIDActor    func(childComplexity int) int
		UserType       func(childComplexity int) int
	}

	ContentProperty struct {
		ExampleValue func(childComplexity int) int
		JSONKeyID    func(childComplexity int) int
		JSONKeyLabel func(childComplexity int) int
		Key          func(childComplexity int) int
		Type         func(childComplexity int) int
		URLSource    func(childComplexity int) int
	}

	DataAdsBalance struct {
		AdsAccountID    func(childComplexity int) int
		CurrentBalance  func(childComplexity int) int
		HistorySpending func(childComplexity int) int
		HistoryTopup    func(childComplexity int) int
		ID              func(childComplexity int) int
	}

	DataAdsCampaign struct {
		Audience func(childComplexity int) int
		Campaign func(childComplexity int) int
		Content  func(childComplexity int) int
	}

	DeletedAdsContent struct {
		AdsContent func(childComplexity int) int
		Result     func(childComplexity int) int
	}

	DeletedAudience struct {
		Audience func(childComplexity int) int
		Result   func(childComplexity int) int
	}

	DeletedCampaign struct {
		Campaign func(childComplexity int) int
		Result   func(childComplexity int) int
	}

	DeletedPlacementContent struct {
		PlacementContent func(childComplexity int) int
		Result           func(childComplexity int) int
	}

	HistorySpending struct {
		Amount            func(childComplexity int) int
		CampaignID        func(childComplexity int) int
		CampaignName      func(childComplexity int) int
		CampaignObjective func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		ID                func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		WalletAdID        func(childComplexity int) int
	}

	HistoryTopup struct {
		AdminFee        func(childComplexity int) int
		Amount          func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		ExpiredAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		IsSuccess       func(childComplexity int) int
		TopupMethodID   func(childComplexity int) int
		TopupMethodName func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UserID          func(childComplexity int) int
		WalletAdID      func(childComplexity int) int
	}

	Mutation struct {
		CancelInvitation            func(childComplexity int, input model.InputCancelInvitation) int
		CheckPayment                func(childComplexity int, topupID string) int
		CreateAdsContent            func(childComplexity int, input *model.InputAdsContent) int
		CreateAdsPlacement          func(childComplexity int, input model.InputAdsPlacement) int
		CreateAudience              func(childComplexity int, input *model.InputAudience) int
		CreateCampaign              func(childComplexity int, input *model.InputCampaign) int
		CreatePlacementContent      func(childComplexity int, input *model.InputPlacementContentDirect) int
		DeleteAdsContent            func(childComplexity int, adsContentID string) int
		DeleteAudience              func(childComplexity int, audienceID string) int
		DeleteCampaign              func(childComplexity int, campaignID string) int
		DeletePlacementContent      func(childComplexity int, placementContentID string) int
		EditAdsPlacement            func(childComplexity int, input model.InputEditAdsPlacement) int
		EditStatusCampaignPublished func(childComplexity int, input model.EventCampaignPublished) int
		EditStatusCampaignReview    func(childComplexity int, input model.EventCampaignReview) int
		EditUserRole                func(childComplexity int, input model.InputEditUserRole) int
		InviteMember                func(childComplexity int, input model.InputInviteMember) int
		LeaveAdsAccount             func(childComplexity int, input model.InputLeaveAdsAccount) int
		PublishCampaign             func(childComplexity int, campaignID string) int
		RemoveUserFromAdsAccount    func(childComplexity int, input model.RemoveUserFromAdsAccount) int
		RespondInvitation           func(childComplexity int, input model.InputRespondInvitation) int
		SelectApprover              func(childComplexity int, input model.InputSelectApprover) int
		ToggleAdsPlacement          func(childComplexity int, input model.InputToggleAdsPlacement) int
		TopupPayment                func(childComplexity int, input *model.InputTopup) int
		UpdateAdsAccountName        func(childComplexity int, input model.InputEditAdsAccountName) int
		UpdateAdsContent            func(childComplexity int, input *model.InputUpdateAdsContent) int
		UpdateAudience              func(childComplexity int, input *model.InputUpdateAudience) int
		UpdateCampaign              func(childComplexity int, input *model.InputUpdateCampaign) int
		UpdatePlacementContent      func(childComplexity int, input *model.InputUpdatePlacementContent) int
	}

	MyAccountInvitation struct {
		AdsAccount          func(childComplexity int) int
		AdsInvitationStatus func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Role                func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UserInviter         func(childComplexity int) int
	}

	MyAccountRequest struct {
		AdsAccount          func(childComplexity int) int
		AdsInvitationStatus func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Role                func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UserInvited         func(childComplexity int) int
	}

	NestedAdsAccount struct {
		AccountType    func(childComplexity int) int
		AdsAccountName func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	PaymentDetail struct {
		AccountName          func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		DeepLink             func(childComplexity int) int
		DesktopURL           func(childComplexity int) int
		ExpiredAt            func(childComplexity int) int
		ExternalID           func(childComplexity int) int
		MobileURL            func(childComplexity int) int
		OrderID              func(childComplexity int) int
		PartnerTransactionID func(childComplexity int) int
		Payment              func(childComplexity int) int
		PaymentCode          func(childComplexity int) int
		PaymentMethod        func(childComplexity int) int
		Phone                func(childComplexity int) int
		Price                func(childComplexity int) int
		PriceAdmin           func(childComplexity int) int
		PriceRaw             func(childComplexity int) int
		QRCode               func(childComplexity int) int
		Status               func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UserID               func(childComplexity int) int
		VaNumber             func(childComplexity int) int
	}

	PaymentMethod struct {
		AdminFeeFixed   func(childComplexity int) int
		AdminFeePercent func(childComplexity int) int
		ExpirationTime  func(childComplexity int) int
		ID              func(childComplexity int) int
		Logo            func(childComplexity int) int
		MaxPrice        func(childComplexity int) int
		MinPrice        func(childComplexity int) int
		Name            func(childComplexity int) int
		Status          func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	PlacementContent struct {
		AdsContent        func(childComplexity int) int
		AdsContentID      func(childComplexity int) int
		AdsPlacement      func(childComplexity int) int
		AdsPlacementID    func(childComplexity int) int
		Content           func(childComplexity int) int
		CostClickBid      func(childComplexity int) int
		CostConversionBid func(childComplexity int) int
		CostDurationBid   func(childComplexity int) int
		CostViewBid       func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		ID                func(childComplexity int) int
		SpecialFilter     func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	Query struct {
		AdsContents             func(childComplexity int, filter *model.AdsContentsFilter, limit *int, offset *int) int
		Audiences               func(childComplexity int, filter *model.AudienceFilter, limit *int, offset *int) int
		Campaigns               func(childComplexity int, filter *model.CampaignsFilter, limit *int, offset *int) int
		GetAdsBalance           func(childComplexity int, input *model.InputQueryAdsBalance) int
		GetAdsCampaignPublished func(childComplexity int) int
		GetAdsCampaignReview    func(childComplexity int) int
		GetAllAdsAccount        func(childComplexity int) int
		GetAllAdsAudience       func(childComplexity int, limit *int, utoken string, accountID string) int
		GetAllAdsCamoaign       func(childComplexity int, limit *int, utoken string, accountID string) int
		GetAllAdsContent        func(childComplexity int, limit *int, utoken string, accountID string) int
		GetAllPaymentMethod     func(childComplexity int) int
		GetDuePayment           func(childComplexity int, adsAccountID string) int
		ListAdsPlacement        func(childComplexity int) int
		ListUser                func(childComplexity int) int
		MyAccountInvitation     func(childComplexity int) int
		MyAccountRequest        func(childComplexity int) int
		MyAdsAccount            func(childComplexity int) int
	}

	ResponseAdsAudience struct {
		Age                func(childComplexity int) int
		AudienceName       func(childComplexity int) int
		AudienceProperties func(childComplexity int) int
		Draft              func(childComplexity int) int
		Gender             func(childComplexity int) int
		Interest           func(childComplexity int) int
		LatestUpdate       func(childComplexity int) int
		Live               func(childComplexity int) int
		Location           func(childComplexity int) int
		Published          func(childComplexity int) int
	}

	ResponseAdsCampaign struct {
		AudienceName       func(childComplexity int) int
		AudienceProperties func(childComplexity int) int
		CampaingProperties func(childComplexity int) int
		ContentName        func(childComplexity int) int
		ContentProperties  func(childComplexity int) int
		Description        func(childComplexity int) int
		LatestUpdate       func(childComplexity int) int
		NameCampaign       func(childComplexity int) int
		Objective          func(childComplexity int) int
		RejectionHistory   func(childComplexity int) int
		StatusCampaign     func(childComplexity int) int
	}

	ResponseAdsContent struct {
		AdsContentProperties func(childComplexity int) int
		ContentName          func(childComplexity int) int
		Draft                func(childComplexity int) int
		LastUpdated          func(childComplexity int) int
		Live                 func(childComplexity int) int
		Placements           func(childComplexity int) int
		Published            func(childComplexity int) int
	}

	ResponseAdsListAccount struct {
		AdsAccountID   func(childComplexity int) int
		AdsAccountName func(childComplexity int) int
	}

	ResponseCancelInvitation struct {
		AdsAccountID     func(childComplexity int) int
		AdsAccountName   func(childComplexity int) int
		AdsInvitationID  func(childComplexity int) int
		InvitationStatus func(childComplexity int) int
		TimestampCreated func(childComplexity int) int
		TimestampUpdated func(childComplexity int) int
		UserIDInvited    func(childComplexity int) int
		UserIDInviter    func(childComplexity int) int
		UserNameInvited  func(childComplexity int) int
		UserNameInviter  func(childComplexity int) int
		UserRoleInvited  func(childComplexity int) int
	}

	ResponseEventCampaign struct {
		Campaign func(childComplexity int) int
		Result   func(childComplexity int) int
	}

	ResponseRespondInvitation struct {
		NewAdsAccount     func(childComplexity int) int
		UpdatedInvitation func(childComplexity int) int
	}

	ResponseSubcribe struct {
		Event      func(childComplexity int) int
		Properties func(childComplexity int) int
	}

	ResponseToggleAdsPacement struct {
		ID       func(childComplexity int) int
		IsActive func(childComplexity int) int
	}

	SimpleAdsAccount struct {
		AccountType    func(childComplexity int) int
		AdsAccountName func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	SpecialProperty struct {
		JSONKeyID    func(childComplexity int) int
		JSONKeyLabel func(childComplexity int) int
		QueryParam   func(childComplexity int) int
		Type         func(childComplexity int) int
		URLSource    func(childComplexity int) int
	}

	Subscription struct {
		MessageUpdateAdsPlacementEvent func(childComplexity int) int
	}

	User struct {
		Fullname       func(childComplexity int) int
		ID             func(childComplexity int) int
		ProfilePicture func(childComplexity int) int
		Username       func(childComplexity int) int
	}

	WalletAds struct {
		Balance     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		WalletAdsID func(childComplexity int) int
	}

	PropertiesUpdate struct {
		NamePropertie  func(childComplexity int) int
		ValuePropertie func(childComplexity int) int
	}
}

type AdsContentResolver interface {
	PlacementContents(ctx context.Context, obj *model.AdsContent) ([]*model.PlacementContent, error)
	Campaigns(ctx context.Context, obj *model.AdsContent) ([]*model.Campaign, error)
}
type AudienceResolver interface {
	Campaigns(ctx context.Context, obj *model.Audience) ([]*model.Campaign, error)
}
type CampaignResolver interface {
	Audience(ctx context.Context, obj *model.Campaign) (*model.Audience, error)
	AdsContent(ctx context.Context, obj *model.Campaign) (*model.AdsContent, error)
	CampaignHistories(ctx context.Context, obj *model.Campaign) ([]*model.CampaignHistories, error)
}
type CampaignHistoriesResolver interface {
	User(ctx context.Context, obj *model.CampaignHistories) (*model.User, error)
}
type MutationResolver interface {
	UpdateAdsAccountName(ctx context.Context, input model.InputEditAdsAccountName) (*model.NestedAdsAccount, error)
	RemoveUserFromAdsAccount(ctx context.Context, input model.RemoveUserFromAdsAccount) (*model.AdsAccountMember, error)
	SelectApprover(ctx context.Context, input model.InputSelectApprover) (*model.AdsAccount, error)
	LeaveAdsAccount(ctx context.Context, input model.InputLeaveAdsAccount) (*model.AdsAccountMember, error)
	EditUserRole(ctx context.Context, input model.InputEditUserRole) (*model.AdsAccountMember, error)
	InviteMember(ctx context.Context, input model.InputInviteMember) (*model.MyAccountRequest, error)
	RespondInvitation(ctx context.Context, input model.InputRespondInvitation) (*model.ResponseRespondInvitation, error)
	CancelInvitation(ctx context.Context, input model.InputCancelInvitation) (*model.AdsAccountInvitation, error)
	CreateAdsPlacement(ctx context.Context, input model.InputAdsPlacement) (*model.AdsPlacement, error)
	EditAdsPlacement(ctx context.Context, input model.InputEditAdsPlacement) (*model.AdsPlacement, error)
	ToggleAdsPlacement(ctx context.Context, input model.InputToggleAdsPlacement) (*model.ResponseToggleAdsPacement, error)
	EditStatusCampaignReview(ctx context.Context, input model.EventCampaignReview) (*model.ResponseEventCampaign, error)
	EditStatusCampaignPublished(ctx context.Context, input model.EventCampaignPublished) (*model.ResponseEventCampaign, error)
	TopupPayment(ctx context.Context, input *model.InputTopup) (*model.PaymentDetail, error)
	CheckPayment(ctx context.Context, topupID string) (*model.PaymentDetail, error)
	CreateCampaign(ctx context.Context, input *model.InputCampaign) (*model.Campaign, error)
	CreateAudience(ctx context.Context, input *model.InputAudience) (*model.Audience, error)
	CreateAdsContent(ctx context.Context, input *model.InputAdsContent) (*model.AdsContent, error)
	CreatePlacementContent(ctx context.Context, input *model.InputPlacementContentDirect) (*model.PlacementContent, error)
	UpdateCampaign(ctx context.Context, input *model.InputUpdateCampaign) (*model.Campaign, error)
	UpdateAudience(ctx context.Context, input *model.InputUpdateAudience) (*model.Audience, error)
	UpdateAdsContent(ctx context.Context, input *model.InputUpdateAdsContent) (*model.AdsContent, error)
	UpdatePlacementContent(ctx context.Context, input *model.InputUpdatePlacementContent) (*model.PlacementContent, error)
	DeleteCampaign(ctx context.Context, campaignID string) (*model.DeletedCampaign, error)
	DeleteAudience(ctx context.Context, audienceID string) (*model.DeletedAudience, error)
	DeleteAdsContent(ctx context.Context, adsContentID string) (*model.DeletedAdsContent, error)
	DeletePlacementContent(ctx context.Context, placementContentID string) (*model.DeletedPlacementContent, error)
	PublishCampaign(ctx context.Context, campaignID string) (*model.Campaign, error)
}
type PaymentDetailResolver interface {
	PaymentMethod(ctx context.Context, obj *model.PaymentDetail) (*model.PaymentMethod, error)
}
type PlacementContentResolver interface {
	AdsPlacement(ctx context.Context, obj *model.PlacementContent) (*model.AdsPlacement, error)
	AdsContent(ctx context.Context, obj *model.PlacementContent) (*model.AdsContent, error)
}
type QueryResolver interface {
	MyAdsAccount(ctx context.Context) ([]*model.AdsAccount, error)
	MyAccountInvitation(ctx context.Context) ([]*model.MyAccountInvitation, error)
	MyAccountRequest(ctx context.Context) ([]*model.MyAccountRequest, error)
	ListUser(ctx context.Context) ([]*model.User, error)
	ListAdsPlacement(ctx context.Context) ([]*model.AdsPlacement, error)
	GetAllAdsAccount(ctx context.Context) ([]*model.SimpleAdsAccount, error)
	GetAllAdsContent(ctx context.Context, limit *int, utoken string, accountID string) ([]*model.ResponseAdsContent, error)
	GetAllAdsAudience(ctx context.Context, limit *int, utoken string, accountID string) ([]*model.ResponseAdsAudience, error)
	GetAllAdsCamoaign(ctx context.Context, limit *int, utoken string, accountID string) ([]*model.ResponseAdsCampaign, error)
	GetAdsBalance(ctx context.Context, input *model.InputQueryAdsBalance) (*model.DataAdsBalance, error)
	GetAdsCampaignReview(ctx context.Context) ([]*model.DataAdsCampaign, error)
	GetAdsCampaignPublished(ctx context.Context) ([]*model.DataAdsCampaign, error)
	GetAllPaymentMethod(ctx context.Context) ([]*model.PaymentMethod, error)
	GetDuePayment(ctx context.Context, adsAccountID string) (*model.PaymentDetail, error)
	Campaigns(ctx context.Context, filter *model.CampaignsFilter, limit *int, offset *int) ([]*model.Campaign, error)
	AdsContents(ctx context.Context, filter *model.AdsContentsFilter, limit *int, offset *int) ([]*model.AdsContent, error)
	Audiences(ctx context.Context, filter *model.AudienceFilter, limit *int, offset *int) ([]*model.Audience, error)
}
type SubscriptionResolver interface {
	MessageUpdateAdsPlacementEvent(ctx context.Context) (<-chan *model.ResponseSubcribe, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AdsAccount.account_type":
		if e.complexity.AdsAccount.AccountType == nil {
			break
		}

		return e.complexity.AdsAccount.AccountType(childComplexity), true

	case "AdsAccount.ads_account_members":
		if e.complexity.AdsAccount.AdsAccountMembers == nil {
			break
		}

		return e.complexity.AdsAccount.AdsAccountMembers(childComplexity), true

	case "AdsAccount.ads_account_name":
		if e.complexity.AdsAccount.AdsAccountName == nil {
			break
		}

		return e.complexity.AdsAccount.AdsAccountName(childComplexity), true

	case "AdsAccount.approver_mode":
		if e.complexity.AdsAccount.ApproverMode == nil {
			break
		}

		return e.complexity.AdsAccount.ApproverMode(childComplexity), true

	case "AdsAccount.business":
		if e.complexity.AdsAccount.Business == nil {
			break
		}

		return e.complexity.AdsAccount.Business(childComplexity), true

	case "AdsAccount.created_at":
		if e.complexity.AdsAccount.CreatedAt == nil {
			break
		}

		return e.complexity.AdsAccount.CreatedAt(childComplexity), true

	case "AdsAccount.id":
		if e.complexity.AdsAccount.ID == nil {
			break
		}

		return e.complexity.AdsAccount.ID(childComplexity), true

	case "AdsAccount.updated_at":
		if e.complexity.AdsAccount.UpdatedAt == nil {
			break
		}

		return e.complexity.AdsAccount.UpdatedAt(childComplexity), true

	case "AdsAccount.user":
		if e.complexity.AdsAccount.User == nil {
			break
		}

		return e.complexity.AdsAccount.User(childComplexity), true

	case "AdsAccount.wallet_ad_id":
		if e.complexity.AdsAccount.WalletAdID == nil {
			break
		}

		return e.complexity.AdsAccount.WalletAdID(childComplexity), true

	case "AdsAccountInvitation.ads_account_id":
		if e.complexity.AdsAccountInvitation.AdsAccountID == nil {
			break
		}

		return e.complexity.AdsAccountInvitation.AdsAccountID(childComplexity), true

	case "AdsAccountInvitation.ads_invitation_status":
		if e.complexity.AdsAccountInvitation.AdsInvitationStatus == nil {
			break
		}

		return e.complexity.AdsAccountInvitation.AdsInvitationStatus(childComplexity), true

	case "AdsAccountInvitation.created_at":
		if e.complexity.AdsAccountInvitation.CreatedAt == nil {
			break
		}

		return e.complexity.AdsAccountInvitation.CreatedAt(childComplexity), true

	case "AdsAccountInvitation.id":
		if e.complexity.AdsAccountInvitation.ID == nil {
			break
		}

		return e.complexity.AdsAccountInvitation.ID(childComplexity), true

	case "AdsAccountInvitation.role":
		if e.complexity.AdsAccountInvitation.Role == nil {
			break
		}

		return e.complexity.AdsAccountInvitation.Role(childComplexity), true

	case "AdsAccountInvitation.updated_at":
		if e.complexity.AdsAccountInvitation.UpdatedAt == nil {
			break
		}

		return e.complexity.AdsAccountInvitation.UpdatedAt(childComplexity), true

	case "AdsAccountInvitation.user_invited_id":
		if e.complexity.AdsAccountInvitation.UserInvitedID == nil {
			break
		}

		return e.complexity.AdsAccountInvitation.UserInvitedID(childComplexity), true

	case "AdsAccountInvitation.user_inviter_id":
		if e.complexity.AdsAccountInvitation.UserInviterID == nil {
			break
		}

		return e.complexity.AdsAccountInvitation.UserInviterID(childComplexity), true

	case "AdsAccountMember.created_at":
		if e.complexity.AdsAccountMember.CreatedAt == nil {
			break
		}

		return e.complexity.AdsAccountMember.CreatedAt(childComplexity), true

	case "AdsAccountMember.id":
		if e.complexity.AdsAccountMember.ID == nil {
			break
		}

		return e.complexity.AdsAccountMember.ID(childComplexity), true

	case "AdsAccountMember.is_approver":
		if e.complexity.AdsAccountMember.IsApprover == nil {
			break
		}

		return e.complexity.AdsAccountMember.IsApprover(childComplexity), true

	case "AdsAccountMember.is_me":
		if e.complexity.AdsAccountMember.IsMe == nil {
			break
		}

		return e.complexity.AdsAccountMember.IsMe(childComplexity), true

	case "AdsAccountMember.role":
		if e.complexity.AdsAccountMember.Role == nil {
			break
		}

		return e.complexity.AdsAccountMember.Role(childComplexity), true

	case "AdsAccountMember.updated_at":
		if e.complexity.AdsAccountMember.UpdatedAt == nil {
			break
		}

		return e.complexity.AdsAccountMember.UpdatedAt(childComplexity), true

	case "AdsAccountMember.user":
		if e.complexity.AdsAccountMember.User == nil {
			break
		}

		return e.complexity.AdsAccountMember.User(childComplexity), true

	case "AdsAccountReceivingDiscount.adsAccountId":
		if e.complexity.AdsAccountReceivingDiscount.AdsAccountID == nil {
			break
		}

		return e.complexity.AdsAccountReceivingDiscount.AdsAccountID(childComplexity), true

	case "AdsAccountReceivingDiscount.adsPlacementId":
		if e.complexity.AdsAccountReceivingDiscount.AdsPlacementID == nil {
			break
		}

		return e.complexity.AdsAccountReceivingDiscount.AdsPlacementID(childComplexity), true

	case "AdsAccountReceivingDiscount.placementAdsAccountDsicount":
		if e.complexity.AdsAccountReceivingDiscount.PlacementAdsAccountDsicount == nil {
			break
		}

		return e.complexity.AdsAccountReceivingDiscount.PlacementAdsAccountDsicount(childComplexity), true

	case "AdsContent.ads_account_id":
		if e.complexity.AdsContent.AdsAccountID == nil {
			break
		}

		return e.complexity.AdsContent.AdsAccountID(childComplexity), true

	case "AdsContent.ads_content_name":
		if e.complexity.AdsContent.AdsContentName == nil {
			break
		}

		return e.complexity.AdsContent.AdsContentName(childComplexity), true

	case "AdsContent.campaigns":
		if e.complexity.AdsContent.Campaigns == nil {
			break
		}

		return e.complexity.AdsContent.Campaigns(childComplexity), true

	case "AdsContent.created_at":
		if e.complexity.AdsContent.CreatedAt == nil {
			break
		}

		return e.complexity.AdsContent.CreatedAt(childComplexity), true

	case "AdsContent.id":
		if e.complexity.AdsContent.ID == nil {
			break
		}

		return e.complexity.AdsContent.ID(childComplexity), true

	case "AdsContent.placement_contents":
		if e.complexity.AdsContent.PlacementContents == nil {
			break
		}

		return e.complexity.AdsContent.PlacementContents(childComplexity), true

	case "AdsContent.updated_at":
		if e.complexity.AdsContent.UpdatedAt == nil {
			break
		}

		return e.complexity.AdsContent.UpdatedAt(childComplexity), true

	case "AdsPlacement.ads_account_receiving_discounts":
		if e.complexity.AdsPlacement.AdsAccountReceivingDiscounts == nil {
			break
		}

		return e.complexity.AdsPlacement.AdsAccountReceivingDiscounts(childComplexity), true

	case "AdsPlacement.ads_account_restricted_placements":
		if e.complexity.AdsPlacement.AdsAccountRestrictedPlacements == nil {
			break
		}

		return e.complexity.AdsPlacement.AdsAccountRestrictedPlacements(childComplexity), true

	case "AdsPlacement.ads_placement_name":
		if e.complexity.AdsPlacement.AdsPlacementName == nil {
			break
		}

		return e.complexity.AdsPlacement.AdsPlacementName(childComplexity), true

	case "AdsPlacement.base_click_cost":
		if e.complexity.AdsPlacement.BaseClickCost == nil {
			break
		}

		return e.complexity.AdsPlacement.BaseClickCost(childComplexity), true

	case "AdsPlacement.base_conversion_cost":
		if e.complexity.AdsPlacement.BaseConversionCost == nil {
			break
		}

		return e.complexity.AdsPlacement.BaseConversionCost(childComplexity), true

	case "AdsPlacement.base_duration_cost":
		if e.complexity.AdsPlacement.BaseDurationCost == nil {
			break
		}

		return e.complexity.AdsPlacement.BaseDurationCost(childComplexity), true

	case "AdsPlacement.base_view_cost":
		if e.complexity.AdsPlacement.BaseViewCost == nil {
			break
		}

		return e.complexity.AdsPlacement.BaseViewCost(childComplexity), true

	case "AdsPlacement.click_cost_increment":
		if e.complexity.AdsPlacement.ClickCostIncrement == nil {
			break
		}

		return e.complexity.AdsPlacement.ClickCostIncrement(childComplexity), true

	case "AdsPlacement.content_properties":
		if e.complexity.AdsPlacement.ContentProperties == nil {
			break
		}

		return e.complexity.AdsPlacement.ContentProperties(childComplexity), true

	case "AdsPlacement.conversion_cost_increment":
		if e.complexity.AdsPlacement.ConversionCostIncrement == nil {
			break
		}

		return e.complexity.AdsPlacement.ConversionCostIncrement(childComplexity), true

	case "AdsPlacement.created_at":
		if e.complexity.AdsPlacement.CreatedAt == nil {
			break
		}

		return e.complexity.AdsPlacement.CreatedAt(childComplexity), true

	case "AdsPlacement.description":
		if e.complexity.AdsPlacement.Description == nil {
			break
		}

		return e.complexity.AdsPlacement.Description(childComplexity), true

	case "AdsPlacement.discount_percentage":
		if e.complexity.AdsPlacement.DiscountPercentage == nil {
			break
		}

		return e.complexity.AdsPlacement.DiscountPercentage(childComplexity), true

	case "AdsPlacement.html_view":
		if e.complexity.AdsPlacement.HTMLView == nil {
			break
		}

		return e.complexity.AdsPlacement.HTMLView(childComplexity), true

	case "AdsPlacement.id":
		if e.complexity.AdsPlacement.ID == nil {
			break
		}

		return e.complexity.AdsPlacement.ID(childComplexity), true

	case "AdsPlacement.is_active":
		if e.complexity.AdsPlacement.IsActive == nil {
			break
		}

		return e.complexity.AdsPlacement.IsActive(childComplexity), true

	case "AdsPlacement.is_clicked":
		if e.complexity.AdsPlacement.IsClicked == nil {
			break
		}

		return e.complexity.AdsPlacement.IsClicked(childComplexity), true

	case "AdsPlacement.is_conversion":
		if e.complexity.AdsPlacement.IsConversion == nil {
			break
		}

		return e.complexity.AdsPlacement.IsConversion(childComplexity), true

	case "AdsPlacement.is_discount_all":
		if e.complexity.AdsPlacement.IsDiscountAll == nil {
			break
		}

		return e.complexity.AdsPlacement.IsDiscountAll(childComplexity), true

	case "AdsPlacement.is_restricted":
		if e.complexity.AdsPlacement.IsRestricted == nil {
			break
		}

		return e.complexity.AdsPlacement.IsRestricted(childComplexity), true

	case "AdsPlacement.restricted_type":
		if e.complexity.AdsPlacement.RestrictedType == nil {
			break
		}

		return e.complexity.AdsPlacement.RestrictedType(childComplexity), true

	case "AdsPlacement.special_filter_properties":
		if e.complexity.AdsPlacement.SpecialFilterProperties == nil {
			break
		}

		return e.complexity.AdsPlacement.SpecialFilterProperties(childComplexity), true

	case "AdsPlacement.updated_at":
		if e.complexity.AdsPlacement.UpdatedAt == nil {
			break
		}

		return e.complexity.AdsPlacement.UpdatedAt(childComplexity), true

	case "AdsPlacement.view_cost_increment":
		if e.complexity.AdsPlacement.ViewCostIncrement == nil {
			break
		}

		return e.complexity.AdsPlacement.ViewCostIncrement(childComplexity), true

	case "Audience.address":
		if e.complexity.Audience.Address == nil {
			break
		}

		return e.complexity.Audience.Address(childComplexity), true

	case "Audience.ads_account_id":
		if e.complexity.Audience.AdsAccountID == nil {
			break
		}

		return e.complexity.Audience.AdsAccountID(childComplexity), true

	case "Audience.age":
		if e.complexity.Audience.Age == nil {
			break
		}

		return e.complexity.Audience.Age(childComplexity), true

	case "Audience.audience_name":
		if e.complexity.Audience.AudienceName == nil {
			break
		}

		return e.complexity.Audience.AudienceName(childComplexity), true

	case "Audience.campaigns":
		if e.complexity.Audience.Campaigns == nil {
			break
		}

		return e.complexity.Audience.Campaigns(childComplexity), true

	case "Audience.created_at":
		if e.complexity.Audience.CreatedAt == nil {
			break
		}

		return e.complexity.Audience.CreatedAt(childComplexity), true

	case "Audience.gender":
		if e.complexity.Audience.Gender == nil {
			break
		}

		return e.complexity.Audience.Gender(childComplexity), true

	case "Audience.id":
		if e.complexity.Audience.ID == nil {
			break
		}

		return e.complexity.Audience.ID(childComplexity), true

	case "Audience.interest":
		if e.complexity.Audience.Interest == nil {
			break
		}

		return e.complexity.Audience.Interest(childComplexity), true

	case "Audience.locations":
		if e.complexity.Audience.Locations == nil {
			break
		}

		return e.complexity.Audience.Locations(childComplexity), true

	case "Audience.updated_at":
		if e.complexity.Audience.UpdatedAt == nil {
			break
		}

		return e.complexity.Audience.UpdatedAt(childComplexity), true

	case "Business.id":
		if e.complexity.Business.ID == nil {
			break
		}

		return e.complexity.Business.ID(childComplexity), true

	case "Business.name":
		if e.complexity.Business.Name == nil {
			break
		}

		return e.complexity.Business.Name(childComplexity), true

	case "Business.owner":
		if e.complexity.Business.Owner == nil {
			break
		}

		return e.complexity.Business.Owner(childComplexity), true

	case "Campaign.ads_account_id":
		if e.complexity.Campaign.AdsAccountID == nil {
			break
		}

		return e.complexity.Campaign.AdsAccountID(childComplexity), true

	case "Campaign.ads_content":
		if e.complexity.Campaign.AdsContent == nil {
			break
		}

		return e.complexity.Campaign.AdsContent(childComplexity), true

	case "Campaign.ads_content_id":
		if e.complexity.Campaign.AdsContentID == nil {
			break
		}

		return e.complexity.Campaign.AdsContentID(childComplexity), true

	case "Campaign.audience":
		if e.complexity.Campaign.Audience == nil {
			break
		}

		return e.complexity.Campaign.Audience(childComplexity), true

	case "Campaign.audience_id":
		if e.complexity.Campaign.AudienceID == nil {
			break
		}

		return e.complexity.Campaign.AudienceID(childComplexity), true

	case "Campaign.budget_limit":
		if e.complexity.Campaign.BudgetLimit == nil {
			break
		}

		return e.complexity.Campaign.BudgetLimit(childComplexity), true

	case "Campaign.campaign_histories":
		if e.complexity.Campaign.CampaignHistories == nil {
			break
		}

		return e.complexity.Campaign.CampaignHistories(childComplexity), true

	case "Campaign.campaign_name":
		if e.complexity.Campaign.CampaignName == nil {
			break
		}

		return e.complexity.Campaign.CampaignName(childComplexity), true

	case "Campaign.campaign_objective":
		if e.complexity.Campaign.CampaignObjective == nil {
			break
		}

		return e.complexity.Campaign.CampaignObjective(childComplexity), true

	case "Campaign.campaign_status":
		if e.complexity.Campaign.CampaignStatus == nil {
			break
		}

		return e.complexity.Campaign.CampaignStatus(childComplexity), true

	case "Campaign.created_at":
		if e.complexity.Campaign.CreatedAt == nil {
			break
		}

		return e.complexity.Campaign.CreatedAt(childComplexity), true

	case "Campaign.description":
		if e.complexity.Campaign.Description == nil {
			break
		}

		return e.complexity.Campaign.Description(childComplexity), true

	case "Campaign.end_date":
		if e.complexity.Campaign.EndDate == nil {
			break
		}

		return e.complexity.Campaign.EndDate(childComplexity), true

	case "Campaign.id":
		if e.complexity.Campaign.ID == nil {
			break
		}

		return e.complexity.Campaign.ID(childComplexity), true

	case "Campaign.updated_at":
		if e.complexity.Campaign.UpdatedAt == nil {
			break
		}

		return e.complexity.Campaign.UpdatedAt(childComplexity), true

	case "CampaignHistories.created_at":
		if e.complexity.CampaignHistories.CreatedAt == nil {
			break
		}

		return e.complexity.CampaignHistories.CreatedAt(childComplexity), true

	case "CampaignHistories.id":
		if e.complexity.CampaignHistories.ID == nil {
			break
		}

		return e.complexity.CampaignHistories.ID(childComplexity), true

	case "CampaignHistories.reason":
		if e.complexity.CampaignHistories.Reason == nil {
			break
		}

		return e.complexity.CampaignHistories.Reason(childComplexity), true

	case "CampaignHistories.recorded_status":
		if e.complexity.CampaignHistories.RecordedStatus == nil {
			break
		}

		return e.complexity.CampaignHistories.RecordedStatus(childComplexity), true

	case "CampaignHistories.updated_at":
		if e.complexity.CampaignHistories.UpdatedAt == nil {
			break
		}

		return e.complexity.CampaignHistories.UpdatedAt(childComplexity), true

	case "CampaignHistories.user":
		if e.complexity.CampaignHistories.User == nil {
			break
		}

		return e.complexity.CampaignHistories.User(childComplexity), true

	case "CampaignHistories.user_id_actor":
		if e.complexity.CampaignHistories.UserIDActor == nil {
			break
		}

		return e.complexity.CampaignHistories.UserIDActor(childComplexity), true

	case "CampaignHistories.user_type":
		if e.complexity.CampaignHistories.UserType == nil {
			break
		}

		return e.complexity.CampaignHistories.UserType(childComplexity), true

	case "ContentProperty.example_value":
		if e.complexity.ContentProperty.ExampleValue == nil {
			break
		}

		return e.complexity.ContentProperty.ExampleValue(childComplexity), true

	case "ContentProperty.json_key_id":
		if e.complexity.ContentProperty.JSONKeyID == nil {
			break
		}

		return e.complexity.ContentProperty.JSONKeyID(childComplexity), true

	case "ContentProperty.json_key_label":
		if e.complexity.ContentProperty.JSONKeyLabel == nil {
			break
		}

		return e.complexity.ContentProperty.JSONKeyLabel(childComplexity), true

	case "ContentProperty.key":
		if e.complexity.ContentProperty.Key == nil {
			break
		}

		return e.complexity.ContentProperty.Key(childComplexity), true

	case "ContentProperty.type":
		if e.complexity.ContentProperty.Type == nil {
			break
		}

		return e.complexity.ContentProperty.Type(childComplexity), true

	case "ContentProperty.url_source":
		if e.complexity.ContentProperty.URLSource == nil {
			break
		}

		return e.complexity.ContentProperty.URLSource(childComplexity), true

	case "DataAdsBalance.ads_account_id":
		if e.complexity.DataAdsBalance.AdsAccountID == nil {
			break
		}

		return e.complexity.DataAdsBalance.AdsAccountID(childComplexity), true

	case "DataAdsBalance.current_balance":
		if e.complexity.DataAdsBalance.CurrentBalance == nil {
			break
		}

		return e.complexity.DataAdsBalance.CurrentBalance(childComplexity), true

	case "DataAdsBalance.history_spending":
		if e.complexity.DataAdsBalance.HistorySpending == nil {
			break
		}

		return e.complexity.DataAdsBalance.HistorySpending(childComplexity), true

	case "DataAdsBalance.history_topup":
		if e.complexity.DataAdsBalance.HistoryTopup == nil {
			break
		}

		return e.complexity.DataAdsBalance.HistoryTopup(childComplexity), true

	case "DataAdsBalance.id":
		if e.complexity.DataAdsBalance.ID == nil {
			break
		}

		return e.complexity.DataAdsBalance.ID(childComplexity), true

	case "DataAdsCampaign.audience":
		if e.complexity.DataAdsCampaign.Audience == nil {
			break
		}

		return e.complexity.DataAdsCampaign.Audience(childComplexity), true

	case "DataAdsCampaign.campaign":
		if e.complexity.DataAdsCampaign.Campaign == nil {
			break
		}

		return e.complexity.DataAdsCampaign.Campaign(childComplexity), true

	case "DataAdsCampaign.content":
		if e.complexity.DataAdsCampaign.Content == nil {
			break
		}

		return e.complexity.DataAdsCampaign.Content(childComplexity), true

	case "DeletedAdsContent.ads_content":
		if e.complexity.DeletedAdsContent.AdsContent == nil {
			break
		}

		return e.complexity.DeletedAdsContent.AdsContent(childComplexity), true

	case "DeletedAdsContent.result":
		if e.complexity.DeletedAdsContent.Result == nil {
			break
		}

		return e.complexity.DeletedAdsContent.Result(childComplexity), true

	case "DeletedAudience.audience":
		if e.complexity.DeletedAudience.Audience == nil {
			break
		}

		return e.complexity.DeletedAudience.Audience(childComplexity), true

	case "DeletedAudience.result":
		if e.complexity.DeletedAudience.Result == nil {
			break
		}

		return e.complexity.DeletedAudience.Result(childComplexity), true

	case "DeletedCampaign.campaign":
		if e.complexity.DeletedCampaign.Campaign == nil {
			break
		}

		return e.complexity.DeletedCampaign.Campaign(childComplexity), true

	case "DeletedCampaign.result":
		if e.complexity.DeletedCampaign.Result == nil {
			break
		}

		return e.complexity.DeletedCampaign.Result(childComplexity), true

	case "DeletedPlacementContent.placement_content":
		if e.complexity.DeletedPlacementContent.PlacementContent == nil {
			break
		}

		return e.complexity.DeletedPlacementContent.PlacementContent(childComplexity), true

	case "DeletedPlacementContent.result":
		if e.complexity.DeletedPlacementContent.Result == nil {
			break
		}

		return e.complexity.DeletedPlacementContent.Result(childComplexity), true

	case "HistorySpending.amount":
		if e.complexity.HistorySpending.Amount == nil {
			break
		}

		return e.complexity.HistorySpending.Amount(childComplexity), true

	case "HistorySpending.campaign_id":
		if e.complexity.HistorySpending.CampaignID == nil {
			break
		}

		return e.complexity.HistorySpending.CampaignID(childComplexity), true

	case "HistorySpending.campaign_name":
		if e.complexity.HistorySpending.CampaignName == nil {
			break
		}

		return e.complexity.HistorySpending.CampaignName(childComplexity), true

	case "HistorySpending.campaign_objective":
		if e.complexity.HistorySpending.CampaignObjective == nil {
			break
		}

		return e.complexity.HistorySpending.CampaignObjective(childComplexity), true

	case "HistorySpending.created_at":
		if e.complexity.HistorySpending.CreatedAt == nil {
			break
		}

		return e.complexity.HistorySpending.CreatedAt(childComplexity), true

	case "HistorySpending.id":
		if e.complexity.HistorySpending.ID == nil {
			break
		}

		return e.complexity.HistorySpending.ID(childComplexity), true

	case "HistorySpending.updated_at":
		if e.complexity.HistorySpending.UpdatedAt == nil {
			break
		}

		return e.complexity.HistorySpending.UpdatedAt(childComplexity), true

	case "HistorySpending.wallet_ad_id":
		if e.complexity.HistorySpending.WalletAdID == nil {
			break
		}

		return e.complexity.HistorySpending.WalletAdID(childComplexity), true

	case "HistoryTopup.admin_fee":
		if e.complexity.HistoryTopup.AdminFee == nil {
			break
		}

		return e.complexity.HistoryTopup.AdminFee(childComplexity), true

	case "HistoryTopup.amount":
		if e.complexity.HistoryTopup.Amount == nil {
			break
		}

		return e.complexity.HistoryTopup.Amount(childComplexity), true

	case "HistoryTopup.created_at":
		if e.complexity.HistoryTopup.CreatedAt == nil {
			break
		}

		return e.complexity.HistoryTopup.CreatedAt(childComplexity), true

	case "HistoryTopup.expired_at":
		if e.complexity.HistoryTopup.ExpiredAt == nil {
			break
		}

		return e.complexity.HistoryTopup.ExpiredAt(childComplexity), true

	case "HistoryTopup.id":
		if e.complexity.HistoryTopup.ID == nil {
			break
		}

		return e.complexity.HistoryTopup.ID(childComplexity), true

	case "HistoryTopup.is_success":
		if e.complexity.HistoryTopup.IsSuccess == nil {
			break
		}

		return e.complexity.HistoryTopup.IsSuccess(childComplexity), true

	case "HistoryTopup.topup_method_id":
		if e.complexity.HistoryTopup.TopupMethodID == nil {
			break
		}

		return e.complexity.HistoryTopup.TopupMethodID(childComplexity), true

	case "HistoryTopup.topup_method_name":
		if e.complexity.HistoryTopup.TopupMethodName == nil {
			break
		}

		return e.complexity.HistoryTopup.TopupMethodName(childComplexity), true

	case "HistoryTopup.updated_at":
		if e.complexity.HistoryTopup.UpdatedAt == nil {
			break
		}

		return e.complexity.HistoryTopup.UpdatedAt(childComplexity), true

	case "HistoryTopup.user_id":
		if e.complexity.HistoryTopup.UserID == nil {
			break
		}

		return e.complexity.HistoryTopup.UserID(childComplexity), true

	case "HistoryTopup.wallet_ad_id":
		if e.complexity.HistoryTopup.WalletAdID == nil {
			break
		}

		return e.complexity.HistoryTopup.WalletAdID(childComplexity), true

	case "Mutation.cancelInvitation":
		if e.complexity.Mutation.CancelInvitation == nil {
			break
		}

		args, err := ec.field_Mutation_cancelInvitation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelInvitation(childComplexity, args["input"].(model.InputCancelInvitation)), true

	case "Mutation.checkPayment":
		if e.complexity.Mutation.CheckPayment == nil {
			break
		}

		args, err := ec.field_Mutation_checkPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckPayment(childComplexity, args["topupId"].(string)), true

	case "Mutation.createAdsContent":
		if e.complexity.Mutation.CreateAdsContent == nil {
			break
		}

		args, err := ec.field_Mutation_createAdsContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdsContent(childComplexity, args["input"].(*model.InputAdsContent)), true

	case "Mutation.createAdsPlacement":
		if e.complexity.Mutation.CreateAdsPlacement == nil {
			break
		}

		args, err := ec.field_Mutation_createAdsPlacement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdsPlacement(childComplexity, args["input"].(model.InputAdsPlacement)), true

	case "Mutation.createAudience":
		if e.complexity.Mutation.CreateAudience == nil {
			break
		}

		args, err := ec.field_Mutation_createAudience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAudience(childComplexity, args["input"].(*model.InputAudience)), true

	case "Mutation.createCampaign":
		if e.complexity.Mutation.CreateCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_createCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCampaign(childComplexity, args["input"].(*model.InputCampaign)), true

	case "Mutation.createPlacementContent":
		if e.complexity.Mutation.CreatePlacementContent == nil {
			break
		}

		args, err := ec.field_Mutation_createPlacementContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlacementContent(childComplexity, args["input"].(*model.InputPlacementContentDirect)), true

	case "Mutation.deleteAdsContent":
		if e.complexity.Mutation.DeleteAdsContent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAdsContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAdsContent(childComplexity, args["adsContentId"].(string)), true

	case "Mutation.deleteAudience":
		if e.complexity.Mutation.DeleteAudience == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAudience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAudience(childComplexity, args["audienceId"].(string)), true

	case "Mutation.deleteCampaign":
		if e.complexity.Mutation.DeleteCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCampaign(childComplexity, args["campaignId"].(string)), true

	case "Mutation.deletePlacementContent":
		if e.complexity.Mutation.DeletePlacementContent == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlacementContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlacementContent(childComplexity, args["placementContentId"].(string)), true

	case "Mutation.editAdsPlacement":
		if e.complexity.Mutation.EditAdsPlacement == nil {
			break
		}

		args, err := ec.field_Mutation_editAdsPlacement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditAdsPlacement(childComplexity, args["input"].(model.InputEditAdsPlacement)), true

	case "Mutation.editStatusCampaignPublished":
		if e.complexity.Mutation.EditStatusCampaignPublished == nil {
			break
		}

		args, err := ec.field_Mutation_editStatusCampaignPublished_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditStatusCampaignPublished(childComplexity, args["input"].(model.EventCampaignPublished)), true

	case "Mutation.editStatusCampaignReview":
		if e.complexity.Mutation.EditStatusCampaignReview == nil {
			break
		}

		args, err := ec.field_Mutation_editStatusCampaignReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditStatusCampaignReview(childComplexity, args["input"].(model.EventCampaignReview)), true

	case "Mutation.editUserRole":
		if e.complexity.Mutation.EditUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_editUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditUserRole(childComplexity, args["input"].(model.InputEditUserRole)), true

	case "Mutation.inviteMember":
		if e.complexity.Mutation.InviteMember == nil {
			break
		}

		args, err := ec.field_Mutation_inviteMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InviteMember(childComplexity, args["input"].(model.InputInviteMember)), true

	case "Mutation.leaveAdsAccount":
		if e.complexity.Mutation.LeaveAdsAccount == nil {
			break
		}

		args, err := ec.field_Mutation_leaveAdsAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LeaveAdsAccount(childComplexity, args["input"].(model.InputLeaveAdsAccount)), true

	case "Mutation.publishCampaign":
		if e.complexity.Mutation.PublishCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_publishCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PublishCampaign(childComplexity, args["campaignId"].(string)), true

	case "Mutation.removeUserFromAdsAccount":
		if e.complexity.Mutation.RemoveUserFromAdsAccount == nil {
			break
		}

		args, err := ec.field_Mutation_removeUserFromAdsAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveUserFromAdsAccount(childComplexity, args["input"].(model.RemoveUserFromAdsAccount)), true

	case "Mutation.respondInvitation":
		if e.complexity.Mutation.RespondInvitation == nil {
			break
		}

		args, err := ec.field_Mutation_respondInvitation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RespondInvitation(childComplexity, args["input"].(model.InputRespondInvitation)), true

	case "Mutation.selectApprover":
		if e.complexity.Mutation.SelectApprover == nil {
			break
		}

		args, err := ec.field_Mutation_selectApprover_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SelectApprover(childComplexity, args["input"].(model.InputSelectApprover)), true

	case "Mutation.toggleAdsPlacement":
		if e.complexity.Mutation.ToggleAdsPlacement == nil {
			break
		}

		args, err := ec.field_Mutation_toggleAdsPlacement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ToggleAdsPlacement(childComplexity, args["input"].(model.InputToggleAdsPlacement)), true

	case "Mutation.topupPayment":
		if e.complexity.Mutation.TopupPayment == nil {
			break
		}

		args, err := ec.field_Mutation_topupPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TopupPayment(childComplexity, args["input"].(*model.InputTopup)), true

	case "Mutation.updateAdsAccountName":
		if e.complexity.Mutation.UpdateAdsAccountName == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdsAccountName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdsAccountName(childComplexity, args["input"].(model.InputEditAdsAccountName)), true

	case "Mutation.updateAdsContent":
		if e.complexity.Mutation.UpdateAdsContent == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdsContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdsContent(childComplexity, args["input"].(*model.InputUpdateAdsContent)), true

	case "Mutation.updateAudience":
		if e.complexity.Mutation.UpdateAudience == nil {
			break
		}

		args, err := ec.field_Mutation_updateAudience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAudience(childComplexity, args["input"].(*model.InputUpdateAudience)), true

	case "Mutation.updateCampaign":
		if e.complexity.Mutation.UpdateCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_updateCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCampaign(childComplexity, args["input"].(*model.InputUpdateCampaign)), true

	case "Mutation.updatePlacementContent":
		if e.complexity.Mutation.UpdatePlacementContent == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlacementContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlacementContent(childComplexity, args["input"].(*model.InputUpdatePlacementContent)), true

	case "MyAccountInvitation.ads_account":
		if e.complexity.MyAccountInvitation.AdsAccount == nil {
			break
		}

		return e.complexity.MyAccountInvitation.AdsAccount(childComplexity), true

	case "MyAccountInvitation.ads_invitation_status":
		if e.complexity.MyAccountInvitation.AdsInvitationStatus == nil {
			break
		}

		return e.complexity.MyAccountInvitation.AdsInvitationStatus(childComplexity), true

	case "MyAccountInvitation.created_at":
		if e.complexity.MyAccountInvitation.CreatedAt == nil {
			break
		}

		return e.complexity.MyAccountInvitation.CreatedAt(childComplexity), true

	case "MyAccountInvitation.id":
		if e.complexity.MyAccountInvitation.ID == nil {
			break
		}

		return e.complexity.MyAccountInvitation.ID(childComplexity), true

	case "MyAccountInvitation.role":
		if e.complexity.MyAccountInvitation.Role == nil {
			break
		}

		return e.complexity.MyAccountInvitation.Role(childComplexity), true

	case "MyAccountInvitation.updated_at":
		if e.complexity.MyAccountInvitation.UpdatedAt == nil {
			break
		}

		return e.complexity.MyAccountInvitation.UpdatedAt(childComplexity), true

	case "MyAccountInvitation.user_inviter":
		if e.complexity.MyAccountInvitation.UserInviter == nil {
			break
		}

		return e.complexity.MyAccountInvitation.UserInviter(childComplexity), true

	case "MyAccountRequest.ads_account":
		if e.complexity.MyAccountRequest.AdsAccount == nil {
			break
		}

		return e.complexity.MyAccountRequest.AdsAccount(childComplexity), true

	case "MyAccountRequest.ads_invitation_status":
		if e.complexity.MyAccountRequest.AdsInvitationStatus == nil {
			break
		}

		return e.complexity.MyAccountRequest.AdsInvitationStatus(childComplexity), true

	case "MyAccountRequest.created_at":
		if e.complexity.MyAccountRequest.CreatedAt == nil {
			break
		}

		return e.complexity.MyAccountRequest.CreatedAt(childComplexity), true

	case "MyAccountRequest.id":
		if e.complexity.MyAccountRequest.ID == nil {
			break
		}

		return e.complexity.MyAccountRequest.ID(childComplexity), true

	case "MyAccountRequest.role":
		if e.complexity.MyAccountRequest.Role == nil {
			break
		}

		return e.complexity.MyAccountRequest.Role(childComplexity), true

	case "MyAccountRequest.updated_at":
		if e.complexity.MyAccountRequest.UpdatedAt == nil {
			break
		}

		return e.complexity.MyAccountRequest.UpdatedAt(childComplexity), true

	case "MyAccountRequest.user_invited":
		if e.complexity.MyAccountRequest.UserInvited == nil {
			break
		}

		return e.complexity.MyAccountRequest.UserInvited(childComplexity), true

	case "NestedAdsAccount.account_type":
		if e.complexity.NestedAdsAccount.AccountType == nil {
			break
		}

		return e.complexity.NestedAdsAccount.AccountType(childComplexity), true

	case "NestedAdsAccount.ads_account_name":
		if e.complexity.NestedAdsAccount.AdsAccountName == nil {
			break
		}

		return e.complexity.NestedAdsAccount.AdsAccountName(childComplexity), true

	case "NestedAdsAccount.created_at":
		if e.complexity.NestedAdsAccount.CreatedAt == nil {
			break
		}

		return e.complexity.NestedAdsAccount.CreatedAt(childComplexity), true

	case "NestedAdsAccount.id":
		if e.complexity.NestedAdsAccount.ID == nil {
			break
		}

		return e.complexity.NestedAdsAccount.ID(childComplexity), true

	case "NestedAdsAccount.updated_at":
		if e.complexity.NestedAdsAccount.UpdatedAt == nil {
			break
		}

		return e.complexity.NestedAdsAccount.UpdatedAt(childComplexity), true

	case "PaymentDetail.account_name":
		if e.complexity.PaymentDetail.AccountName == nil {
			break
		}

		return e.complexity.PaymentDetail.AccountName(childComplexity), true

	case "PaymentDetail.created_at":
		if e.complexity.PaymentDetail.CreatedAt == nil {
			break
		}

		return e.complexity.PaymentDetail.CreatedAt(childComplexity), true

	case "PaymentDetail.deep_link":
		if e.complexity.PaymentDetail.DeepLink == nil {
			break
		}

		return e.complexity.PaymentDetail.DeepLink(childComplexity), true

	case "PaymentDetail.desktop_url":
		if e.complexity.PaymentDetail.DesktopURL == nil {
			break
		}

		return e.complexity.PaymentDetail.DesktopURL(childComplexity), true

	case "PaymentDetail.expired_at":
		if e.complexity.PaymentDetail.ExpiredAt == nil {
			break
		}

		return e.complexity.PaymentDetail.ExpiredAt(childComplexity), true

	case "PaymentDetail.external_id":
		if e.complexity.PaymentDetail.ExternalID == nil {
			break
		}

		return e.complexity.PaymentDetail.ExternalID(childComplexity), true

	case "PaymentDetail.mobile_url":
		if e.complexity.PaymentDetail.MobileURL == nil {
			break
		}

		return e.complexity.PaymentDetail.MobileURL(childComplexity), true

	case "PaymentDetail.order_id":
		if e.complexity.PaymentDetail.OrderID == nil {
			break
		}

		return e.complexity.PaymentDetail.OrderID(childComplexity), true

	case "PaymentDetail.partner_transaction_id":
		if e.complexity.PaymentDetail.PartnerTransactionID == nil {
			break
		}

		return e.complexity.PaymentDetail.PartnerTransactionID(childComplexity), true

	case "PaymentDetail.payment":
		if e.complexity.PaymentDetail.Payment == nil {
			break
		}

		return e.complexity.PaymentDetail.Payment(childComplexity), true

	case "PaymentDetail.payment_code":
		if e.complexity.PaymentDetail.PaymentCode == nil {
			break
		}

		return e.complexity.PaymentDetail.PaymentCode(childComplexity), true

	case "PaymentDetail.payment_method":
		if e.complexity.PaymentDetail.PaymentMethod == nil {
			break
		}

		return e.complexity.PaymentDetail.PaymentMethod(childComplexity), true

	case "PaymentDetail.Phone":
		if e.complexity.PaymentDetail.Phone == nil {
			break
		}

		return e.complexity.PaymentDetail.Phone(childComplexity), true

	case "PaymentDetail.price":
		if e.complexity.PaymentDetail.Price == nil {
			break
		}

		return e.complexity.PaymentDetail.Price(childComplexity), true

	case "PaymentDetail.price_admin":
		if e.complexity.PaymentDetail.PriceAdmin == nil {
			break
		}

		return e.complexity.PaymentDetail.PriceAdmin(childComplexity), true

	case "PaymentDetail.price_raw":
		if e.complexity.PaymentDetail.PriceRaw == nil {
			break
		}

		return e.complexity.PaymentDetail.PriceRaw(childComplexity), true

	case "PaymentDetail.qr_code":
		if e.complexity.PaymentDetail.QRCode == nil {
			break
		}

		return e.complexity.PaymentDetail.QRCode(childComplexity), true

	case "PaymentDetail.status":
		if e.complexity.PaymentDetail.Status == nil {
			break
		}

		return e.complexity.PaymentDetail.Status(childComplexity), true

	case "PaymentDetail.updated_at":
		if e.complexity.PaymentDetail.UpdatedAt == nil {
			break
		}

		return e.complexity.PaymentDetail.UpdatedAt(childComplexity), true

	case "PaymentDetail.user_id":
		if e.complexity.PaymentDetail.UserID == nil {
			break
		}

		return e.complexity.PaymentDetail.UserID(childComplexity), true

	case "PaymentDetail.va_number":
		if e.complexity.PaymentDetail.VaNumber == nil {
			break
		}

		return e.complexity.PaymentDetail.VaNumber(childComplexity), true

	case "PaymentMethod.admin_fee_fixed":
		if e.complexity.PaymentMethod.AdminFeeFixed == nil {
			break
		}

		return e.complexity.PaymentMethod.AdminFeeFixed(childComplexity), true

	case "PaymentMethod.admin_fee_percent":
		if e.complexity.PaymentMethod.AdminFeePercent == nil {
			break
		}

		return e.complexity.PaymentMethod.AdminFeePercent(childComplexity), true

	case "PaymentMethod.expiration_time":
		if e.complexity.PaymentMethod.ExpirationTime == nil {
			break
		}

		return e.complexity.PaymentMethod.ExpirationTime(childComplexity), true

	case "PaymentMethod.id":
		if e.complexity.PaymentMethod.ID == nil {
			break
		}

		return e.complexity.PaymentMethod.ID(childComplexity), true

	case "PaymentMethod.logo":
		if e.complexity.PaymentMethod.Logo == nil {
			break
		}

		return e.complexity.PaymentMethod.Logo(childComplexity), true

	case "PaymentMethod.max_price":
		if e.complexity.PaymentMethod.MaxPrice == nil {
			break
		}

		return e.complexity.PaymentMethod.MaxPrice(childComplexity), true

	case "PaymentMethod.min_price":
		if e.complexity.PaymentMethod.MinPrice == nil {
			break
		}

		return e.complexity.PaymentMethod.MinPrice(childComplexity), true

	case "PaymentMethod.name":
		if e.complexity.PaymentMethod.Name == nil {
			break
		}

		return e.complexity.PaymentMethod.Name(childComplexity), true

	case "PaymentMethod.status":
		if e.complexity.PaymentMethod.Status == nil {
			break
		}

		return e.complexity.PaymentMethod.Status(childComplexity), true

	case "PaymentMethod.type":
		if e.complexity.PaymentMethod.Type == nil {
			break
		}

		return e.complexity.PaymentMethod.Type(childComplexity), true

	case "PlacementContent.ads_content":
		if e.complexity.PlacementContent.AdsContent == nil {
			break
		}

		return e.complexity.PlacementContent.AdsContent(childComplexity), true

	case "PlacementContent.ads_content_id":
		if e.complexity.PlacementContent.AdsContentID == nil {
			break
		}

		return e.complexity.PlacementContent.AdsContentID(childComplexity), true

	case "PlacementContent.ads_placement":
		if e.complexity.PlacementContent.AdsPlacement == nil {
			break
		}

		return e.complexity.PlacementContent.AdsPlacement(childComplexity), true

	case "PlacementContent.ads_placement_id":
		if e.complexity.PlacementContent.AdsPlacementID == nil {
			break
		}

		return e.complexity.PlacementContent.AdsPlacementID(childComplexity), true

	case "PlacementContent.content":
		if e.complexity.PlacementContent.Content == nil {
			break
		}

		return e.complexity.PlacementContent.Content(childComplexity), true

	case "PlacementContent.cost_click_bid":
		if e.complexity.PlacementContent.CostClickBid == nil {
			break
		}

		return e.complexity.PlacementContent.CostClickBid(childComplexity), true

	case "PlacementContent.cost_conversion_bid":
		if e.complexity.PlacementContent.CostConversionBid == nil {
			break
		}

		return e.complexity.PlacementContent.CostConversionBid(childComplexity), true

	case "PlacementContent.cost_duration_bid":
		if e.complexity.PlacementContent.CostDurationBid == nil {
			break
		}

		return e.complexity.PlacementContent.CostDurationBid(childComplexity), true

	case "PlacementContent.cost_view_bid":
		if e.complexity.PlacementContent.CostViewBid == nil {
			break
		}

		return e.complexity.PlacementContent.CostViewBid(childComplexity), true

	case "PlacementContent.created_at":
		if e.complexity.PlacementContent.CreatedAt == nil {
			break
		}

		return e.complexity.PlacementContent.CreatedAt(childComplexity), true

	case "PlacementContent.id":
		if e.complexity.PlacementContent.ID == nil {
			break
		}

		return e.complexity.PlacementContent.ID(childComplexity), true

	case "PlacementContent.special_filter":
		if e.complexity.PlacementContent.SpecialFilter == nil {
			break
		}

		return e.complexity.PlacementContent.SpecialFilter(childComplexity), true

	case "PlacementContent.updated_at":
		if e.complexity.PlacementContent.UpdatedAt == nil {
			break
		}

		return e.complexity.PlacementContent.UpdatedAt(childComplexity), true

	case "Query.adsContents":
		if e.complexity.Query.AdsContents == nil {
			break
		}

		args, err := ec.field_Query_adsContents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdsContents(childComplexity, args["filter"].(*model.AdsContentsFilter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.audiences":
		if e.complexity.Query.Audiences == nil {
			break
		}

		args, err := ec.field_Query_audiences_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Audiences(childComplexity, args["filter"].(*model.AudienceFilter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.campaigns":
		if e.complexity.Query.Campaigns == nil {
			break
		}

		args, err := ec.field_Query_campaigns_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Campaigns(childComplexity, args["filter"].(*model.CampaignsFilter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.getAdsBalance":
		if e.complexity.Query.GetAdsBalance == nil {
			break
		}

		args, err := ec.field_Query_getAdsBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAdsBalance(childComplexity, args["input"].(*model.InputQueryAdsBalance)), true

	case "Query.getAdsCampaignPublished":
		if e.complexity.Query.GetAdsCampaignPublished == nil {
			break
		}

		return e.complexity.Query.GetAdsCampaignPublished(childComplexity), true

	case "Query.getAdsCampaignReview":
		if e.complexity.Query.GetAdsCampaignReview == nil {
			break
		}

		return e.complexity.Query.GetAdsCampaignReview(childComplexity), true

	case "Query.getAllAdsAccount":
		if e.complexity.Query.GetAllAdsAccount == nil {
			break
		}

		return e.complexity.Query.GetAllAdsAccount(childComplexity), true

	case "Query.getAllAdsAudience":
		if e.complexity.Query.GetAllAdsAudience == nil {
			break
		}

		args, err := ec.field_Query_getAllAdsAudience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllAdsAudience(childComplexity, args["limit"].(*int), args["utoken"].(string), args["accountId"].(string)), true

	case "Query.getAllAdsCamoaign":
		if e.complexity.Query.GetAllAdsCamoaign == nil {
			break
		}

		args, err := ec.field_Query_getAllAdsCamoaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllAdsCamoaign(childComplexity, args["limit"].(*int), args["utoken"].(string), args["accountId"].(string)), true

	case "Query.getAllAdsContent":
		if e.complexity.Query.GetAllAdsContent == nil {
			break
		}

		args, err := ec.field_Query_getAllAdsContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllAdsContent(childComplexity, args["limit"].(*int), args["utoken"].(string), args["accountId"].(string)), true

	case "Query.getAllPaymentMethod":
		if e.complexity.Query.GetAllPaymentMethod == nil {
			break
		}

		return e.complexity.Query.GetAllPaymentMethod(childComplexity), true

	case "Query.getDuePayment":
		if e.complexity.Query.GetDuePayment == nil {
			break
		}

		args, err := ec.field_Query_getDuePayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDuePayment(childComplexity, args["adsAccountId"].(string)), true

	case "Query.listAdsPlacement":
		if e.complexity.Query.ListAdsPlacement == nil {
			break
		}

		return e.complexity.Query.ListAdsPlacement(childComplexity), true

	case "Query.listUser":
		if e.complexity.Query.ListUser == nil {
			break
		}

		return e.complexity.Query.ListUser(childComplexity), true

	case "Query.myAccountInvitation":
		if e.complexity.Query.MyAccountInvitation == nil {
			break
		}

		return e.complexity.Query.MyAccountInvitation(childComplexity), true

	case "Query.myAccountRequest":
		if e.complexity.Query.MyAccountRequest == nil {
			break
		}

		return e.complexity.Query.MyAccountRequest(childComplexity), true

	case "Query.myAdsAccount":
		if e.complexity.Query.MyAdsAccount == nil {
			break
		}

		return e.complexity.Query.MyAdsAccount(childComplexity), true

	case "ResponseAdsAudience.Age":
		if e.complexity.ResponseAdsAudience.Age == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.Age(childComplexity), true

	case "ResponseAdsAudience.AudienceName":
		if e.complexity.ResponseAdsAudience.AudienceName == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.AudienceName(childComplexity), true

	case "ResponseAdsAudience.AudienceProperties":
		if e.complexity.ResponseAdsAudience.AudienceProperties == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.AudienceProperties(childComplexity), true

	case "ResponseAdsAudience.Draft":
		if e.complexity.ResponseAdsAudience.Draft == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.Draft(childComplexity), true

	case "ResponseAdsAudience.Gender":
		if e.complexity.ResponseAdsAudience.Gender == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.Gender(childComplexity), true

	case "ResponseAdsAudience.Interest":
		if e.complexity.ResponseAdsAudience.Interest == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.Interest(childComplexity), true

	case "ResponseAdsAudience.LatestUpdate":
		if e.complexity.ResponseAdsAudience.LatestUpdate == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.LatestUpdate(childComplexity), true

	case "ResponseAdsAudience.Live":
		if e.complexity.ResponseAdsAudience.Live == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.Live(childComplexity), true

	case "ResponseAdsAudience.Location":
		if e.complexity.ResponseAdsAudience.Location == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.Location(childComplexity), true

	case "ResponseAdsAudience.Published":
		if e.complexity.ResponseAdsAudience.Published == nil {
			break
		}

		return e.complexity.ResponseAdsAudience.Published(childComplexity), true

	case "ResponseAdsCampaign.AudienceName":
		if e.complexity.ResponseAdsCampaign.AudienceName == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.AudienceName(childComplexity), true

	case "ResponseAdsCampaign.AudienceProperties":
		if e.complexity.ResponseAdsCampaign.AudienceProperties == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.AudienceProperties(childComplexity), true

	case "ResponseAdsCampaign.CampaingProperties":
		if e.complexity.ResponseAdsCampaign.CampaingProperties == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.CampaingProperties(childComplexity), true

	case "ResponseAdsCampaign.ContentName":
		if e.complexity.ResponseAdsCampaign.ContentName == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.ContentName(childComplexity), true

	case "ResponseAdsCampaign.ContentProperties":
		if e.complexity.ResponseAdsCampaign.ContentProperties == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.ContentProperties(childComplexity), true

	case "ResponseAdsCampaign.Description":
		if e.complexity.ResponseAdsCampaign.Description == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.Description(childComplexity), true

	case "ResponseAdsCampaign.LatestUpdate":
		if e.complexity.ResponseAdsCampaign.LatestUpdate == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.LatestUpdate(childComplexity), true

	case "ResponseAdsCampaign.NameCampaign":
		if e.complexity.ResponseAdsCampaign.NameCampaign == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.NameCampaign(childComplexity), true

	case "ResponseAdsCampaign.Objective":
		if e.complexity.ResponseAdsCampaign.Objective == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.Objective(childComplexity), true

	case "ResponseAdsCampaign.RejectionHistory":
		if e.complexity.ResponseAdsCampaign.RejectionHistory == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.RejectionHistory(childComplexity), true

	case "ResponseAdsCampaign.StatusCampaign":
		if e.complexity.ResponseAdsCampaign.StatusCampaign == nil {
			break
		}

		return e.complexity.ResponseAdsCampaign.StatusCampaign(childComplexity), true

	case "ResponseAdsContent.AdsContentProperties":
		if e.complexity.ResponseAdsContent.AdsContentProperties == nil {
			break
		}

		return e.complexity.ResponseAdsContent.AdsContentProperties(childComplexity), true

	case "ResponseAdsContent.ContentName":
		if e.complexity.ResponseAdsContent.ContentName == nil {
			break
		}

		return e.complexity.ResponseAdsContent.ContentName(childComplexity), true

	case "ResponseAdsContent.Draft":
		if e.complexity.ResponseAdsContent.Draft == nil {
			break
		}

		return e.complexity.ResponseAdsContent.Draft(childComplexity), true

	case "ResponseAdsContent.LastUpdated":
		if e.complexity.ResponseAdsContent.LastUpdated == nil {
			break
		}

		return e.complexity.ResponseAdsContent.LastUpdated(childComplexity), true

	case "ResponseAdsContent.Live":
		if e.complexity.ResponseAdsContent.Live == nil {
			break
		}

		return e.complexity.ResponseAdsContent.Live(childComplexity), true

	case "ResponseAdsContent.Placements":
		if e.complexity.ResponseAdsContent.Placements == nil {
			break
		}

		return e.complexity.ResponseAdsContent.Placements(childComplexity), true

	case "ResponseAdsContent.Published":
		if e.complexity.ResponseAdsContent.Published == nil {
			break
		}

		return e.complexity.ResponseAdsContent.Published(childComplexity), true

	case "ResponseAdsListAccount.adsAccountId":
		if e.complexity.ResponseAdsListAccount.AdsAccountID == nil {
			break
		}

		return e.complexity.ResponseAdsListAccount.AdsAccountID(childComplexity), true

	case "ResponseAdsListAccount.adsAccountName":
		if e.complexity.ResponseAdsListAccount.AdsAccountName == nil {
			break
		}

		return e.complexity.ResponseAdsListAccount.AdsAccountName(childComplexity), true

	case "ResponseCancelInvitation.adsAccountId":
		if e.complexity.ResponseCancelInvitation.AdsAccountID == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.AdsAccountID(childComplexity), true

	case "ResponseCancelInvitation.adsAccountName":
		if e.complexity.ResponseCancelInvitation.AdsAccountName == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.AdsAccountName(childComplexity), true

	case "ResponseCancelInvitation.adsInvitationId":
		if e.complexity.ResponseCancelInvitation.AdsInvitationID == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.AdsInvitationID(childComplexity), true

	case "ResponseCancelInvitation.invitationStatus":
		if e.complexity.ResponseCancelInvitation.InvitationStatus == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.InvitationStatus(childComplexity), true

	case "ResponseCancelInvitation.timestampCreated":
		if e.complexity.ResponseCancelInvitation.TimestampCreated == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.TimestampCreated(childComplexity), true

	case "ResponseCancelInvitation.timestampUpdated":
		if e.complexity.ResponseCancelInvitation.TimestampUpdated == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.TimestampUpdated(childComplexity), true

	case "ResponseCancelInvitation.userIdInvited":
		if e.complexity.ResponseCancelInvitation.UserIDInvited == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.UserIDInvited(childComplexity), true

	case "ResponseCancelInvitation.userIdInviter":
		if e.complexity.ResponseCancelInvitation.UserIDInviter == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.UserIDInviter(childComplexity), true

	case "ResponseCancelInvitation.userNameInvited":
		if e.complexity.ResponseCancelInvitation.UserNameInvited == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.UserNameInvited(childComplexity), true

	case "ResponseCancelInvitation.userNameInviter":
		if e.complexity.ResponseCancelInvitation.UserNameInviter == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.UserNameInviter(childComplexity), true

	case "ResponseCancelInvitation.userRoleInvited":
		if e.complexity.ResponseCancelInvitation.UserRoleInvited == nil {
			break
		}

		return e.complexity.ResponseCancelInvitation.UserRoleInvited(childComplexity), true

	case "ResponseEventCampaign.campaign":
		if e.complexity.ResponseEventCampaign.Campaign == nil {
			break
		}

		return e.complexity.ResponseEventCampaign.Campaign(childComplexity), true

	case "ResponseEventCampaign.result":
		if e.complexity.ResponseEventCampaign.Result == nil {
			break
		}

		return e.complexity.ResponseEventCampaign.Result(childComplexity), true

	case "ResponseRespondInvitation.newAdsAccount":
		if e.complexity.ResponseRespondInvitation.NewAdsAccount == nil {
			break
		}

		return e.complexity.ResponseRespondInvitation.NewAdsAccount(childComplexity), true

	case "ResponseRespondInvitation.updatedInvitation":
		if e.complexity.ResponseRespondInvitation.UpdatedInvitation == nil {
			break
		}

		return e.complexity.ResponseRespondInvitation.UpdatedInvitation(childComplexity), true

	case "ResponseSubcribe.event":
		if e.complexity.ResponseSubcribe.Event == nil {
			break
		}

		return e.complexity.ResponseSubcribe.Event(childComplexity), true

	case "ResponseSubcribe.properties":
		if e.complexity.ResponseSubcribe.Properties == nil {
			break
		}

		return e.complexity.ResponseSubcribe.Properties(childComplexity), true

	case "ResponseToggleAdsPacement.id":
		if e.complexity.ResponseToggleAdsPacement.ID == nil {
			break
		}

		return e.complexity.ResponseToggleAdsPacement.ID(childComplexity), true

	case "ResponseToggleAdsPacement.is_active":
		if e.complexity.ResponseToggleAdsPacement.IsActive == nil {
			break
		}

		return e.complexity.ResponseToggleAdsPacement.IsActive(childComplexity), true

	case "SimpleAdsAccount.account_type":
		if e.complexity.SimpleAdsAccount.AccountType == nil {
			break
		}

		return e.complexity.SimpleAdsAccount.AccountType(childComplexity), true

	case "SimpleAdsAccount.ads_account_name":
		if e.complexity.SimpleAdsAccount.AdsAccountName == nil {
			break
		}

		return e.complexity.SimpleAdsAccount.AdsAccountName(childComplexity), true

	case "SimpleAdsAccount.id":
		if e.complexity.SimpleAdsAccount.ID == nil {
			break
		}

		return e.complexity.SimpleAdsAccount.ID(childComplexity), true

	case "SpecialProperty.json_key_id":
		if e.complexity.SpecialProperty.JSONKeyID == nil {
			break
		}

		return e.complexity.SpecialProperty.JSONKeyID(childComplexity), true

	case "SpecialProperty.json_key_label":
		if e.complexity.SpecialProperty.JSONKeyLabel == nil {
			break
		}

		return e.complexity.SpecialProperty.JSONKeyLabel(childComplexity), true

	case "SpecialProperty.query_param":
		if e.complexity.SpecialProperty.QueryParam == nil {
			break
		}

		return e.complexity.SpecialProperty.QueryParam(childComplexity), true

	case "SpecialProperty.type":
		if e.complexity.SpecialProperty.Type == nil {
			break
		}

		return e.complexity.SpecialProperty.Type(childComplexity), true

	case "SpecialProperty.url_source":
		if e.complexity.SpecialProperty.URLSource == nil {
			break
		}

		return e.complexity.SpecialProperty.URLSource(childComplexity), true

	case "Subscription.messageUpdateAdsPlacementEvent":
		if e.complexity.Subscription.MessageUpdateAdsPlacementEvent == nil {
			break
		}

		return e.complexity.Subscription.MessageUpdateAdsPlacementEvent(childComplexity), true

	case "User.fullname":
		if e.complexity.User.Fullname == nil {
			break
		}

		return e.complexity.User.Fullname(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.profile_picture":
		if e.complexity.User.ProfilePicture == nil {
			break
		}

		return e.complexity.User.ProfilePicture(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "WalletAds.balance":
		if e.complexity.WalletAds.Balance == nil {
			break
		}

		return e.complexity.WalletAds.Balance(childComplexity), true

	case "WalletAds.createdAt":
		if e.complexity.WalletAds.CreatedAt == nil {
			break
		}

		return e.complexity.WalletAds.CreatedAt(childComplexity), true

	case "WalletAds.updatedAt":
		if e.complexity.WalletAds.UpdatedAt == nil {
			break
		}

		return e.complexity.WalletAds.UpdatedAt(childComplexity), true

	case "WalletAds.walletAdsId":
		if e.complexity.WalletAds.WalletAdsID == nil {
			break
		}

		return e.complexity.WalletAds.WalletAdsID(childComplexity), true

	case "propertiesUpdate.namePropertie":
		if e.complexity.PropertiesUpdate.NamePropertie == nil {
			break
		}

		return e.complexity.PropertiesUpdate.NamePropertie(childComplexity), true

	case "propertiesUpdate.valuePropertie":
		if e.complexity.PropertiesUpdate.ValuePropertie == nil {
			break
		}

		return e.complexity.PropertiesUpdate.ValuePropertie(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphqls", Input: `# USER SETTING

type User {
  id: ID!
  fullname: String!
  username: String!
  profile_picture: String
}

type Business {
  id: ID!
  name: String!
  owner: Int!
}

type AdsAccountMember {
  id: ID!
  role: String!
  is_approver: Boolean!
  is_me: Boolean
  user: User
  created_at: String!
  updated_at: String!
}

type AdsAccount {
  id: ID!
  ads_account_name: String!
  account_type: String!
  user: User
  business: Business
  approver_mode: Boolean!
  created_at: String!
  updated_at: String!
  wallet_ad_id: ID!
  ads_account_members: [AdsAccountMember!]
}

type NestedAdsAccount {
  id: ID!
  ads_account_name: String!
  account_type: String!
  created_at: String!
  updated_at: String!
}

type SimpleAdsAccount {
  id: ID!
  ads_account_name: String!
  account_type: String!
}

type MyAccountInvitation {
  id: ID!
  ads_account: NestedAdsAccount!
  role: String!
  ads_invitation_status: String!
  user_inviter: User!
  created_at: String!
  updated_at: String!
}

type AdsAccountInvitation {
  id: ID!
  ads_account_id: Int!
  role: String!
  ads_invitation_status: String!
  user_inviter_id: Int!
  user_invited_id: Int!
  created_at: String!
  updated_at: String!
}

type MyAccountRequest {
  id: ID!
  ads_account: NestedAdsAccount!
  role: String!
  ads_invitation_status: String!
  user_invited: User!
  created_at: String!
  updated_at: String!
}

enum AccountType {
  BUSINESS
  PERSONAL
}

enum CampaignStatusType {
  DRAFT
  TEAM_APPROVAL
  ADMIN_APPROVAL
  LIVE
  CAMPAIGN_REJECTED
  PUBLISHED
  TEAM_PAUSED
  ADMIN_PAUSED
}

enum GenderType {
  MALE
  FEMALE
}

enum RecordedType {
  RECORD
  FAILED_RECORD
}

enum UserType {
  MEMBER
  APPROVER
  ADMINZEUS
  SYSTEM
}

type WalletAds {
  walletAdsId: ID!
  balance: Float!
  createdAt: String!
  updatedAt: String!
}

type ContentProperty {
  key: String!
  type: String!
  example_value: String!
  url_source: String
  json_key_id: String
  json_key_label: String
}

type SpecialProperty {
  query_param: String!
  type: String!
  url_source: String
  json_key_id: String
  json_key_label: String
}

type AdsPlacement {
  id: ID!
  ads_placement_name: String!
  base_duration_cost: Float!
  base_view_cost: Float!
  view_cost_increment: Float!
  base_click_cost: Float!
  click_cost_increment: Float!
  base_conversion_cost: Float!
  conversion_cost_increment: Float!
  discount_percentage: Float!
  is_discount_all: Boolean!
  description: String!
  is_active: Boolean!
  content_properties: [ContentProperty!]!
  html_view: String!
  special_filter_properties: [SpecialProperty]!
  is_restricted: Boolean!
  restricted_type: String
  is_clicked: Boolean!
  is_conversion: Boolean!
  created_at: String!
  updated_at: String!
  ads_account_receiving_discounts: [SimpleAdsAccount]!
  ads_account_restricted_placements: [SimpleAdsAccount]!
}

type AdsAccountReceivingDiscount {
  placementAdsAccountDsicount: ID!
  adsAccountId: ID!
  adsPlacementId: ID!
}

type ResponseAdsListAccount {
  adsAccountId: ID!
  adsAccountName: String!
}

type propertiesUpdate {
  namePropertie: String!
  valuePropertie: String!
}

type ResponseSubcribe {
  event: String!
  properties: [propertiesUpdate!]!
}

type PlacementContent {
  id: ID!
  content: String
  special_filter: String
  cost_duration_bid: Float
  cost_view_bid: Float
  cost_click_bid: Float
  cost_conversion_bid: Float
  ads_placement_id: Int!
  ads_content_id: Int!
  ads_placement: AdsPlacement!
  ads_content: AdsContent!
  created_at: String!
  updated_at: String!
}

type DeletedPlacementContent {
  result: String!,
  placement_content: PlacementContent
}

input InputPlacementContent {
  ads_placement_id: Int!
  content: String
  special_filter: String
  cost_duration_bid: Float
  cost_view_bid: Float
  cost_click_bid: Float
  cost_conversion_bid: Float
}

input InputPlacementContentDirect {
  ads_placement_id: Int!
  ads_content_id: Int!
  content: String
  special_filter: String
  cost_duration_bid: Float
  cost_view_bid: Float
  cost_click_bid: Float
  cost_conversion_bid: Float
}

input InputUpdatePlacementContent {
  id: ID!
  content: String
  special_filter: String
  cost_duration_bid: Float
  cost_view_bid: Float
  cost_click_bid: Float
  cost_conversion_bid: Float
}

type ResponseAdsCampaign {
  NameCampaign: String!
  StatusCampaign: String!
  Objective: String!
  AudienceName: String!
  ContentName: String!
  Description: String!
  LatestUpdate: String!
  CampaingProperties: Campaign!
  AudienceProperties: Audience!
  ContentProperties: ContentProperty!
  RejectionHistory: String!
}

type ResponseAdsAudience {
  AudienceName: String!
  Location: String!
  Gender: String!
  Age: String!
  Interest: String!
  Published: Int!
  Live: Int!
  Draft: Int!
  AudienceProperties: Audience!
  LatestUpdate: String!
}

type ResponseAdsContent {
  ContentName: String!
  Placements: [AdsPlacement!]
  Published: Int!
  Live: Int!
  Draft: Int!
  AdsContentProperties: AdsContent!
  LastUpdated: String!
}

input CreateAdsAccount {
  adsAccountId: ID!
  adsAccountName: String!
  adsAccountType: AccountType!
  walletAdsId: Int!
  userId: Int!
  businessId: Int!
  createdAt: String!
}

input CreateAdsWalletAccount {
  walletAdsId: ID!
  balance: Float!
  createdAt: String!
}

input EditPropertiesAdsPlacement {
  baseDurationCost: Int!
  adsPlacementName: String!
  baseViewCost: Int!
  viewCostIncremental: Int!
  baseClickCost: Int!
  clickCostIncrement: Int!
  baseTransactionCost: Int!
  incrementalTransactionCost: Int!
  discountCost: Int!
}

input InputEditAdsAccountName {
  adsAccountId: ID!
  adsAccountName: String!
}

type Subscription {
  messageUpdateAdsPlacementEvent: ResponseSubcribe!
}

input RemoveUserFromAdsAccount {
  adsAccountId: ID!
  userId: Int!
}

input InputSelectApprover {
  adsMemberId: ID!
  isDisable: Boolean
}

input InputLeaveAdsAccount {
  adsAccountId: Int!
}

input InputEditUserRole {
  adsAccountId: Int!
  userId: Int!
  userRole: String!
}

input InputInviteMember {
  userIdInvited: Int!
  role: String!
  adsAccountId: Int!
}

input InputRespondInvitation {
  adsInvitationId: Int!
  isApprove: Boolean!
}

type ResponseRespondInvitation {
  updatedInvitation: AdsAccountInvitation
  newAdsAccount: AdsAccount
}

type ResponseCancelInvitation {
  adsInvitationId: Int!
  userIdInviter: Int!
  userNameInviter: String!
  userIdInvited: Int!
  userNameInvited: String!
  userRoleInvited: String!
  adsAccountId: Int!
  adsAccountName: String!
  invitationStatus: String!
  timestampCreated: String!
  timestampUpdated: String!
}

input InputCancelInvitation {
  adsInvitationId: Int!
}

input InputContentProperty {
  key: String!
  type: String!
  example_value: String!
  url_source: String
  json_key_id: String
  json_key_label: String
}

input InputSpecialProperty {
  query_param: String!
  type: String!
  url_source: String
  json_key_id: String
  json_key_label: String
}

input InputId {
  id: ID!
}

input InputAdsPlacement {
  ads_placement_name: String!
  base_duration_cost: Float!
  base_view_cost: Float!
  view_cost_increment: Float!
  base_click_cost: Float!
  click_cost_increment: Float!
  base_conversion_cost: Float!
  conversion_cost_increment: Float!
  discount_percentage: Float!
  is_discount_all: Boolean!
  description: String!
  is_active: Boolean!
  content_properties: [InputContentProperty!]!
  html_view: String!
  special_filter_properties: [InputSpecialProperty!]
  is_restricted: Boolean!
  restricted_type: String
  is_clicked: Boolean!
  is_conversion: Boolean!
  ads_account_receiving_discounts: [InputId!]
  ads_account_restricted_placements: [InputId!]
}

input InputEditAdsPlacement {
  id: ID!
  ads_placement_name: String!
  base_duration_cost: Float!
  base_view_cost: Float!
  view_cost_increment: Float!
  base_click_cost: Float!
  click_cost_increment: Float!
  base_conversion_cost: Float!
  conversion_cost_increment: Float!
  discount_percentage: Float!
  is_discount_all: Boolean!
  description: String!
  is_active: Boolean!
  content_properties: [InputContentProperty!]!
  html_view: String!
  special_filter_properties: [InputSpecialProperty!]
  is_restricted: Boolean!
  restricted_type: String
  is_clicked: Boolean!
  is_conversion: Boolean!
  ads_account_receiving_discounts: [InputId!]
  ads_account_restricted_placements: [InputId!]
}

input InputToggleAdsPlacement {
  id: ID!
  is_active: Boolean!
}

type ResponseToggleAdsPacement {
  id: ID!
  is_active: Boolean!
}

input EventCampaignReview {
  id: ID!
  reason: String!
  action: String!
}

input EventCampaignPublished {
  id: ID!
  reason: String!
  action: String!
}

type ResponseEventCampaign {
  result: String!
  campaign: Campaign
}

type HistorySpending {
  id: ID!
  wallet_ad_id: ID!
  amount: Float!
  created_at: String!
  updated_at: String!
  campaign_id: ID!
  campaign_name: String!
  campaign_objective: String!
}

type HistoryTopup {
  id: ID!
  wallet_ad_id: ID!
  amount: Float!
  admin_fee: Float!
  user_id: ID!, 
  topup_method_id: Int!,
  topup_method_name: String!
  expired_at: String!,
  created_at: String!,
  updated_at: String!,
  is_success: Boolean!
}

type DataAdsBalance {
  id: ID!
  ads_account_id: ID!
  current_balance: Float!
  history_spending: [HistorySpending]
  history_topup: [HistoryTopup]
}

type CampaignHistories {
  id: ID!
  reason: String!
  recorded_status: String!
  user: User!
  user_id_actor: Int!
  user_type: String!
  created_at: String!
  updated_at: String!
}

type Campaign {
  id: ID!
  ads_account_id: Int!
  audience_id: Int
  ads_content_id: Int
  campaign_name: String!
  campaign_objective: String
  description: String
  end_date: String
  budget_limit: Float
  campaign_status: String!
  created_at: String!
  updated_at: String!
  audience: Audience
  ads_content: AdsContent
  campaign_histories: [CampaignHistories!]!
}

type DeletedCampaign {
  result: String!
  campaign: Campaign
}

input InputCampaign {
  ads_account_id: Int!
  audience_id: Int
  ads_content_id: Int
  campaign_name: String!
  campaign_objective: String
  description: String
  end_date: String
  budget_limit: Float
}

input InputUpdateCampaign {
  id: ID!
  audience_id: Int
  ads_content_id: Int
  campaign_name: String!
  campaign_objective: String!
  campaign_status: String!
  description: String!
  end_date: String
  budget_limit: Float!
}

input CampaignsFilter {
  ads_account_id: Int
  campaign_status: String
  range_filter: RangeFilter
}

type Audience {
  id: ID!
  ads_account_id: Int!
  address: String
  audience_name: String!
  age: String
  created_at: String!
  updated_at: String!
  gender: String
  interest: String
  locations: String
  campaigns: [Campaign!]
}

type DeletedAudience {
  result: String!
  audience: Audience
}

input InputAudience {
  ads_account_id: Int!
  audience_name: String!
  address: String
  age: String
  gender: String
  interest: String
  locations: String
}

input InputUpdateAudience {
  id: ID!
  audience_name: String
  address: String
  age: String
  gender: String
  interest: String
  locations: String
}

input AudienceFilter {
  ads_account_id: Int
  range_filter: RangeFilter
}

type AdsContent {
  id: ID!
  ads_account_id: Int!
  ads_content_name: String!
  created_at: String!
  updated_at: String!
  placement_contents: [PlacementContent!]!
  campaigns: [Campaign!]!
}

type DeletedAdsContent {
  result: String!
  ads_content: AdsContent
}

input InputAdsContent {
  ads_account_id: Int!
  ads_content_name: String!
  placement_contents: [InputPlacementContent!]
}

input InputUpdateAdsContent {
  id: ID!
  ads_content_name: String
}

input AdsContentsFilter {
  ads_account_id: Int
  range_filter: RangeFilter
}

type DataAdsCampaign {
  campaign: Campaign
  audience: Audience
  content: AdsContent
}

type PaymentMethod {
  id: Int!
  name: String!
  logo: String!
  status: Int!
  type: Int!
  expiration_time: Int!
  admin_fee_fixed: Float!
  admin_fee_percent: Float!
  min_price: Float!
  max_price: Float!
}

type PaymentDetail {
  partner_transaction_id: String!
  user_id: String!
  payment: Int!
  order_id: String!
  external_id: String!
  price: Float!
  price_raw: Float!
  price_admin: Float!
  status: Int!
  Phone: String!
  account_name: String!
  va_number: String!
  desktop_url: String!
  mobile_url: String!
  deep_link: String!
  qr_code: String!
  payment_code: String!
  expired_at: String!
  created_at: String!
  updated_at: String!
  payment_method: PaymentMethod!
}

input InputTopup {
  amount: Float!
  payment_method_id: Int!
  wallet_ad_id: ID!
  phone_number: String
}

input InputQueryAdsBalance {
  ads_account_id: ID!
  start_date: String
  end_date: String
}

input RangeFilter {
  start_date: String
  end_date: String
}

type Query {
  myAdsAccount: [AdsAccount!]!
  myAccountInvitation: [MyAccountInvitation!]!
  myAccountRequest: [MyAccountRequest!]!
  listUser: [User!]!
  listAdsPlacement: [AdsPlacement!]!
  getAllAdsAccount: [SimpleAdsAccount!]!
  getAllAdsContent(
    limit: Int = 10
    utoken: String!
    accountId: String!
  ): [ResponseAdsContent!]
  getAllAdsAudience(
    limit: Int = 10
    utoken: String!
    accountId: String!
  ): [ResponseAdsAudience!]
  getAllAdsCamoaign(
    limit: Int = 10
    utoken: String!
    accountId: String!
  ): [ResponseAdsCampaign!]
  getAdsBalance(input: InputQueryAdsBalance): DataAdsBalance!
  getAdsCampaignReview: [DataAdsCampaign!]!
  getAdsCampaignPublished: [DataAdsCampaign!]!
  getAllPaymentMethod: [PaymentMethod!]!
  getDuePayment(adsAccountId: ID!): PaymentDetail
  campaigns(filter: CampaignsFilter, limit: Int, offset: Int): [Campaign!]!
  adsContents(filter: AdsContentsFilter, limit: Int, offset:Int): [AdsContent!]!
  audiences(filter: AudienceFilter, limit: Int, offset: Int): [Audience!]!
}

type Mutation {
  updateAdsAccountName(input: InputEditAdsAccountName!): NestedAdsAccount!

  removeUserFromAdsAccount(input: RemoveUserFromAdsAccount!): AdsAccountMember!

  selectApprover(input: InputSelectApprover!): AdsAccount!

  leaveAdsAccount(input: InputLeaveAdsAccount!): AdsAccountMember!

  editUserRole(input: InputEditUserRole!): AdsAccountMember!

  inviteMember(input: InputInviteMember!): MyAccountRequest!

  respondInvitation(input: InputRespondInvitation!): ResponseRespondInvitation!

  cancelInvitation(input: InputCancelInvitation!): AdsAccountInvitation!

  createAdsPlacement(input: InputAdsPlacement!): AdsPlacement!

  editAdsPlacement(input: InputEditAdsPlacement!): AdsPlacement!

  toggleAdsPlacement(
    input: InputToggleAdsPlacement!
  ): ResponseToggleAdsPacement!

  editStatusCampaignReview(input: EventCampaignReview!): ResponseEventCampaign!

  editStatusCampaignPublished(
    input: EventCampaignPublished!
  ): ResponseEventCampaign!

  topupPayment(input: InputTopup): PaymentDetail!

  checkPayment(topupId: ID!): PaymentDetail!

  createCampaign(input: InputCampaign): Campaign!

  createAudience(input: InputAudience): Audience!

  createAdsContent(input: InputAdsContent): AdsContent!

  createPlacementContent(input: InputPlacementContentDirect): PlacementContent!

  updateCampaign(input: InputUpdateCampaign): Campaign!

  updateAudience(input: InputUpdateAudience): Audience!

  updateAdsContent(input: InputUpdateAdsContent): AdsContent!

  updatePlacementContent(input: InputUpdatePlacementContent): PlacementContent!

  deleteCampaign(campaignId: ID!): DeletedCampaign!

  deleteAudience(audienceId: ID!): DeletedAudience!

  deleteAdsContent(adsContentId: ID!): DeletedAdsContent!

  deletePlacementContent(placementContentId: ID!): DeletedPlacementContent!

  publishCampaign(campaignId: ID!): Campaign!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_cancelInvitation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputCancelInvitation
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputCancelInvitation2adsᚑmanagerᚋgraphᚋmodelᚐInputCancelInvitation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_checkPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["topupId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topupId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topupId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdsContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputAdsContent
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputAdsContent(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdsPlacement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputAdsPlacement
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputAdsPlacement2adsᚑmanagerᚋgraphᚋmodelᚐInputAdsPlacement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAudience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputAudience
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputAudience(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputCampaign
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputCampaign(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlacementContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputPlacementContentDirect
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputPlacementContentDirect2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputPlacementContentDirect(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAdsContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["adsContentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsContentId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["adsContentId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAudience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["audienceId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audienceId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["audienceId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["campaignId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["campaignId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlacementContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["placementContentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("placementContentId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["placementContentId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editAdsPlacement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputEditAdsPlacement
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputEditAdsPlacement2adsᚑmanagerᚋgraphᚋmodelᚐInputEditAdsPlacement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editStatusCampaignPublished_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EventCampaignPublished
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEventCampaignPublished2adsᚑmanagerᚋgraphᚋmodelᚐEventCampaignPublished(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editStatusCampaignReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EventCampaignReview
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEventCampaignReview2adsᚑmanagerᚋgraphᚋmodelᚐEventCampaignReview(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputEditUserRole
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputEditUserRole2adsᚑmanagerᚋgraphᚋmodelᚐInputEditUserRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_inviteMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputInviteMember
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputInviteMember2adsᚑmanagerᚋgraphᚋmodelᚐInputInviteMember(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_leaveAdsAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputLeaveAdsAccount
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputLeaveAdsAccount2adsᚑmanagerᚋgraphᚋmodelᚐInputLeaveAdsAccount(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_publishCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["campaignId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["campaignId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeUserFromAdsAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RemoveUserFromAdsAccount
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRemoveUserFromAdsAccount2adsᚑmanagerᚋgraphᚋmodelᚐRemoveUserFromAdsAccount(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_respondInvitation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputRespondInvitation
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputRespondInvitation2adsᚑmanagerᚋgraphᚋmodelᚐInputRespondInvitation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_selectApprover_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputSelectApprover
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputSelectApprover2adsᚑmanagerᚋgraphᚋmodelᚐInputSelectApprover(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_toggleAdsPlacement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputToggleAdsPlacement
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputToggleAdsPlacement2adsᚑmanagerᚋgraphᚋmodelᚐInputToggleAdsPlacement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_topupPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputTopup
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputTopup2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputTopup(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdsAccountName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InputEditAdsAccountName
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInputEditAdsAccountName2adsᚑmanagerᚋgraphᚋmodelᚐInputEditAdsAccountName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdsContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputUpdateAdsContent
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputUpdateAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputUpdateAdsContent(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAudience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputUpdateAudience
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputUpdateAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputUpdateAudience(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputUpdateCampaign
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputUpdateCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputUpdateCampaign(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlacementContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputUpdatePlacementContent
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputUpdatePlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputUpdatePlacementContent(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_adsContents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AdsContentsFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOAdsContentsFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContentsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_audiences_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AudienceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOAudienceFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudienceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_campaigns_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CampaignsFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOCampaignsFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getAdsBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InputQueryAdsBalance
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputQueryAdsBalance2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputQueryAdsBalance(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllAdsAudience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["utoken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("utoken"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["utoken"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["accountId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["accountId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getAllAdsCamoaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["utoken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("utoken"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["utoken"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["accountId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["accountId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getAllAdsContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["utoken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("utoken"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["utoken"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["accountId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["accountId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getDuePayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["adsAccountId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["adsAccountId"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AdsAccount_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccount_ads_account_name(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccount_account_type(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccount_user(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖadsᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccount_business(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Business, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Business)
	fc.Result = res
	return ec.marshalOBusiness2ᚖadsᚑmanagerᚋgraphᚋmodelᚐBusiness(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccount_approver_mode(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproverMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccount_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccount_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccount_wallet_ad_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletAdID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccount_ads_account_members(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountMembers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AdsAccountMember)
	fc.Result = res
	return ec.marshalOAdsAccountMember2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountInvitation_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountInvitation_ads_account_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountInvitation_role(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountInvitation_ads_invitation_status(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsInvitationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountInvitation_user_inviter_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserInviterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountInvitation_user_invited_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserInvitedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountInvitation_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountInvitation_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountMember_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountMember",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountMember_role(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountMember",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountMember_is_approver(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountMember",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsApprover, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountMember_is_me(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountMember",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountMember_user(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountMember",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖadsᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountMember_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountMember",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountMember_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountMember) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountMember",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountReceivingDiscount_placementAdsAccountDsicount(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountReceivingDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountReceivingDiscount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlacementAdsAccountDsicount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountReceivingDiscount_adsAccountId(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountReceivingDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountReceivingDiscount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsAccountReceivingDiscount_adsPlacementId(ctx context.Context, field graphql.CollectedField, obj *model.AdsAccountReceivingDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsAccountReceivingDiscount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsPlacementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsContent_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsContent_ads_account_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsContent_ads_content_name(ctx context.Context, field graphql.CollectedField, obj *model.AdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsContentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsContent_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsContent_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsContent_placement_contents(ctx context.Context, field graphql.CollectedField, obj *model.AdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AdsContent().PlacementContents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PlacementContent)
	fc.Result = res
	return ec.marshalNPlacementContent2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐPlacementContentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsContent_campaigns(ctx context.Context, field graphql.CollectedField, obj *model.AdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AdsContent().Campaigns(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Campaign)
	fc.Result = res
	return ec.marshalNCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_id(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_ads_placement_name(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsPlacementName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_base_duration_cost(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseDurationCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_base_view_cost(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseViewCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_view_cost_increment(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewCostIncrement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_base_click_cost(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseClickCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_click_cost_increment(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClickCostIncrement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_base_conversion_cost(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseConversionCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_conversion_cost_increment(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConversionCostIncrement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_discount_percentage(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_is_discount_all(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDiscountAll, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_description(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_is_active(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_content_properties(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ContentProperty)
	fc.Result = res
	return ec.marshalNContentProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐContentPropertyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_html_view(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTMLView, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_special_filter_properties(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecialFilterProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SpecialProperty)
	fc.Result = res
	return ec.marshalNSpecialProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐSpecialProperty(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_is_restricted(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRestricted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_restricted_type(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RestrictedType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_is_clicked(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsClicked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_is_conversion(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsConversion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_ads_account_receiving_discounts(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountReceivingDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SimpleAdsAccount)
	fc.Result = res
	return ec.marshalNSimpleAdsAccount2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐSimpleAdsAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _AdsPlacement_ads_account_restricted_placements(ctx context.Context, field graphql.CollectedField, obj *model.AdsPlacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdsPlacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountRestrictedPlacements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SimpleAdsAccount)
	fc.Result = res
	return ec.marshalNSimpleAdsAccount2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐSimpleAdsAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_id(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_ads_account_id(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_address(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_audience_name(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudienceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_age(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_created_at(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_gender(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_interest(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_locations(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Audience_campaigns(ctx context.Context, field graphql.CollectedField, obj *model.Audience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Audience",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Audience().Campaigns(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Campaign)
	fc.Result = res
	return ec.marshalOCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Business_id(ctx context.Context, field graphql.CollectedField, obj *model.Business) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Business",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Business_name(ctx context.Context, field graphql.CollectedField, obj *model.Business) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Business",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Business_owner(ctx context.Context, field graphql.CollectedField, obj *model.Business) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Business",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_id(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_ads_account_id(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_audience_id(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudienceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_ads_content_id(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsContentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_campaign_name(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_campaign_objective(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignObjective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_description(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_end_date(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_budget_limit(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BudgetLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_campaign_status(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_created_at(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_audience(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Campaign().Audience(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Audience)
	fc.Result = res
	return ec.marshalOAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_ads_content(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Campaign().AdsContent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdsContent)
	fc.Result = res
	return ec.marshalOAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_campaign_histories(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Campaign",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Campaign().CampaignHistories(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CampaignHistories)
	fc.Result = res
	return ec.marshalNCampaignHistories2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignHistoriesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CampaignHistories_id(ctx context.Context, field graphql.CollectedField, obj *model.CampaignHistories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CampaignHistories",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CampaignHistories_reason(ctx context.Context, field graphql.CollectedField, obj *model.CampaignHistories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CampaignHistories",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CampaignHistories_recorded_status(ctx context.Context, field graphql.CollectedField, obj *model.CampaignHistories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CampaignHistories",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordedStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CampaignHistories_user(ctx context.Context, field graphql.CollectedField, obj *model.CampaignHistories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CampaignHistories",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CampaignHistories().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖadsᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _CampaignHistories_user_id_actor(ctx context.Context, field graphql.CollectedField, obj *model.CampaignHistories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CampaignHistories",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserIDActor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CampaignHistories_user_type(ctx context.Context, field graphql.CollectedField, obj *model.CampaignHistories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CampaignHistories",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CampaignHistories_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CampaignHistories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CampaignHistories",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CampaignHistories_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CampaignHistories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CampaignHistories",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentProperty_key(ctx context.Context, field graphql.CollectedField, obj *model.ContentProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContentProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentProperty_type(ctx context.Context, field graphql.CollectedField, obj *model.ContentProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContentProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentProperty_example_value(ctx context.Context, field graphql.CollectedField, obj *model.ContentProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContentProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExampleValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentProperty_url_source(ctx context.Context, field graphql.CollectedField, obj *model.ContentProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContentProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URLSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentProperty_json_key_id(ctx context.Context, field graphql.CollectedField, obj *model.ContentProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContentProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JSONKeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContentProperty_json_key_label(ctx context.Context, field graphql.CollectedField, obj *model.ContentProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContentProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JSONKeyLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataAdsBalance_id(ctx context.Context, field graphql.CollectedField, obj *model.DataAdsBalance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataAdsBalance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataAdsBalance_ads_account_id(ctx context.Context, field graphql.CollectedField, obj *model.DataAdsBalance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataAdsBalance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataAdsBalance_current_balance(ctx context.Context, field graphql.CollectedField, obj *model.DataAdsBalance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataAdsBalance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataAdsBalance_history_spending(ctx context.Context, field graphql.CollectedField, obj *model.DataAdsBalance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataAdsBalance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HistorySpending, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.HistorySpending)
	fc.Result = res
	return ec.marshalOHistorySpending2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐHistorySpending(ctx, field.Selections, res)
}

func (ec *executionContext) _DataAdsBalance_history_topup(ctx context.Context, field graphql.CollectedField, obj *model.DataAdsBalance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataAdsBalance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HistoryTopup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.HistoryTopup)
	fc.Result = res
	return ec.marshalOHistoryTopup2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐHistoryTopup(ctx, field.Selections, res)
}

func (ec *executionContext) _DataAdsCampaign_campaign(ctx context.Context, field graphql.CollectedField, obj *model.DataAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Campaign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Campaign)
	fc.Result = res
	return ec.marshalOCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _DataAdsCampaign_audience(ctx context.Context, field graphql.CollectedField, obj *model.DataAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Audience)
	fc.Result = res
	return ec.marshalOAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) _DataAdsCampaign_content(ctx context.Context, field graphql.CollectedField, obj *model.DataAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdsContent)
	fc.Result = res
	return ec.marshalOAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletedAdsContent_result(ctx context.Context, field graphql.CollectedField, obj *model.DeletedAdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeletedAdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletedAdsContent_ads_content(ctx context.Context, field graphql.CollectedField, obj *model.DeletedAdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeletedAdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdsContent)
	fc.Result = res
	return ec.marshalOAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletedAudience_result(ctx context.Context, field graphql.CollectedField, obj *model.DeletedAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeletedAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletedAudience_audience(ctx context.Context, field graphql.CollectedField, obj *model.DeletedAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeletedAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Audience)
	fc.Result = res
	return ec.marshalOAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletedCampaign_result(ctx context.Context, field graphql.CollectedField, obj *model.DeletedCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeletedCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletedCampaign_campaign(ctx context.Context, field graphql.CollectedField, obj *model.DeletedCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeletedCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Campaign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Campaign)
	fc.Result = res
	return ec.marshalOCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletedPlacementContent_result(ctx context.Context, field graphql.CollectedField, obj *model.DeletedPlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeletedPlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeletedPlacementContent_placement_content(ctx context.Context, field graphql.CollectedField, obj *model.DeletedPlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeletedPlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlacementContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PlacementContent)
	fc.Result = res
	return ec.marshalOPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPlacementContent(ctx, field.Selections, res)
}

func (ec *executionContext) _HistorySpending_id(ctx context.Context, field graphql.CollectedField, obj *model.HistorySpending) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistorySpending",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistorySpending_wallet_ad_id(ctx context.Context, field graphql.CollectedField, obj *model.HistorySpending) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistorySpending",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletAdID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistorySpending_amount(ctx context.Context, field graphql.CollectedField, obj *model.HistorySpending) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistorySpending",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _HistorySpending_created_at(ctx context.Context, field graphql.CollectedField, obj *model.HistorySpending) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistorySpending",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistorySpending_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.HistorySpending) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistorySpending",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistorySpending_campaign_id(ctx context.Context, field graphql.CollectedField, obj *model.HistorySpending) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistorySpending",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistorySpending_campaign_name(ctx context.Context, field graphql.CollectedField, obj *model.HistorySpending) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistorySpending",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistorySpending_campaign_objective(ctx context.Context, field graphql.CollectedField, obj *model.HistorySpending) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistorySpending",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignObjective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_id(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_wallet_ad_id(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletAdID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_amount(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_admin_fee(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdminFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_user_id(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_topup_method_id(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopupMethodID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_topup_method_name(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopupMethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_expired_at(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_created_at(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryTopup_is_success(ctx context.Context, field graphql.CollectedField, obj *model.HistoryTopup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HistoryTopup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdsAccountName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdsAccountName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdsAccountName(rctx, args["input"].(model.InputEditAdsAccountName))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NestedAdsAccount)
	fc.Result = res
	return ec.marshalNNestedAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐNestedAdsAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeUserFromAdsAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeUserFromAdsAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveUserFromAdsAccount(rctx, args["input"].(model.RemoveUserFromAdsAccount))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsAccountMember)
	fc.Result = res
	return ec.marshalNAdsAccountMember2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountMember(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_selectApprover(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_selectApprover_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SelectApprover(rctx, args["input"].(model.InputSelectApprover))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsAccount)
	fc.Result = res
	return ec.marshalNAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_leaveAdsAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_leaveAdsAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LeaveAdsAccount(rctx, args["input"].(model.InputLeaveAdsAccount))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsAccountMember)
	fc.Result = res
	return ec.marshalNAdsAccountMember2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountMember(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editUserRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditUserRole(rctx, args["input"].(model.InputEditUserRole))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsAccountMember)
	fc.Result = res
	return ec.marshalNAdsAccountMember2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountMember(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_inviteMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_inviteMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InviteMember(rctx, args["input"].(model.InputInviteMember))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MyAccountRequest)
	fc.Result = res
	return ec.marshalNMyAccountRequest2ᚖadsᚑmanagerᚋgraphᚋmodelᚐMyAccountRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_respondInvitation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_respondInvitation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RespondInvitation(rctx, args["input"].(model.InputRespondInvitation))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ResponseRespondInvitation)
	fc.Result = res
	return ec.marshalNResponseRespondInvitation2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseRespondInvitation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_cancelInvitation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_cancelInvitation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelInvitation(rctx, args["input"].(model.InputCancelInvitation))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsAccountInvitation)
	fc.Result = res
	return ec.marshalNAdsAccountInvitation2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountInvitation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAdsPlacement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAdsPlacement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdsPlacement(rctx, args["input"].(model.InputAdsPlacement))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsPlacement)
	fc.Result = res
	return ec.marshalNAdsPlacement2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editAdsPlacement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editAdsPlacement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditAdsPlacement(rctx, args["input"].(model.InputEditAdsPlacement))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsPlacement)
	fc.Result = res
	return ec.marshalNAdsPlacement2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_toggleAdsPlacement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_toggleAdsPlacement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ToggleAdsPlacement(rctx, args["input"].(model.InputToggleAdsPlacement))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ResponseToggleAdsPacement)
	fc.Result = res
	return ec.marshalNResponseToggleAdsPacement2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseToggleAdsPacement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editStatusCampaignReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editStatusCampaignReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditStatusCampaignReview(rctx, args["input"].(model.EventCampaignReview))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ResponseEventCampaign)
	fc.Result = res
	return ec.marshalNResponseEventCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseEventCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editStatusCampaignPublished(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editStatusCampaignPublished_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditStatusCampaignPublished(rctx, args["input"].(model.EventCampaignPublished))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ResponseEventCampaign)
	fc.Result = res
	return ec.marshalNResponseEventCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseEventCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_topupPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_topupPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TopupPayment(rctx, args["input"].(*model.InputTopup))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentDetail)
	fc.Result = res
	return ec.marshalNPaymentDetail2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_checkPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_checkPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckPayment(rctx, args["topupId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentDetail)
	fc.Result = res
	return ec.marshalNPaymentDetail2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCampaign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCampaign(rctx, args["input"].(*model.InputCampaign))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Campaign)
	fc.Result = res
	return ec.marshalNCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAudience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAudience_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAudience(rctx, args["input"].(*model.InputAudience))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Audience)
	fc.Result = res
	return ec.marshalNAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAdsContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAdsContent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdsContent(rctx, args["input"].(*model.InputAdsContent))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsContent)
	fc.Result = res
	return ec.marshalNAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPlacementContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPlacementContent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePlacementContent(rctx, args["input"].(*model.InputPlacementContentDirect))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PlacementContent)
	fc.Result = res
	return ec.marshalNPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPlacementContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateCampaign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCampaign(rctx, args["input"].(*model.InputUpdateCampaign))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Campaign)
	fc.Result = res
	return ec.marshalNCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAudience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAudience_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAudience(rctx, args["input"].(*model.InputUpdateAudience))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Audience)
	fc.Result = res
	return ec.marshalNAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdsContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdsContent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdsContent(rctx, args["input"].(*model.InputUpdateAdsContent))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsContent)
	fc.Result = res
	return ec.marshalNAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePlacementContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePlacementContent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePlacementContent(rctx, args["input"].(*model.InputUpdatePlacementContent))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PlacementContent)
	fc.Result = res
	return ec.marshalNPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPlacementContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCampaign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCampaign(rctx, args["campaignId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletedCampaign)
	fc.Result = res
	return ec.marshalNDeletedCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDeletedCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAudience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAudience_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAudience(rctx, args["audienceId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletedAudience)
	fc.Result = res
	return ec.marshalNDeletedAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDeletedAudience(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAdsContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAdsContent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAdsContent(rctx, args["adsContentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletedAdsContent)
	fc.Result = res
	return ec.marshalNDeletedAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDeletedAdsContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePlacementContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePlacementContent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePlacementContent(rctx, args["placementContentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletedPlacementContent)
	fc.Result = res
	return ec.marshalNDeletedPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDeletedPlacementContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_publishCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_publishCampaign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PublishCampaign(rctx, args["campaignId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Campaign)
	fc.Result = res
	return ec.marshalNCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountInvitation_id(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountInvitation_ads_account(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NestedAdsAccount)
	fc.Result = res
	return ec.marshalNNestedAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐNestedAdsAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountInvitation_role(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountInvitation_ads_invitation_status(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsInvitationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountInvitation_user_inviter(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserInviter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖadsᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountInvitation_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountInvitation_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountRequest_id(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountRequest_ads_account(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NestedAdsAccount)
	fc.Result = res
	return ec.marshalNNestedAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐNestedAdsAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountRequest_role(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountRequest_ads_invitation_status(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsInvitationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountRequest_user_invited(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserInvited, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖadsᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountRequest_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MyAccountRequest_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MyAccountRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MyAccountRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NestedAdsAccount_id(ctx context.Context, field graphql.CollectedField, obj *model.NestedAdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NestedAdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NestedAdsAccount_ads_account_name(ctx context.Context, field graphql.CollectedField, obj *model.NestedAdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NestedAdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NestedAdsAccount_account_type(ctx context.Context, field graphql.CollectedField, obj *model.NestedAdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NestedAdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NestedAdsAccount_created_at(ctx context.Context, field graphql.CollectedField, obj *model.NestedAdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NestedAdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NestedAdsAccount_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.NestedAdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NestedAdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_partner_transaction_id(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartnerTransactionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_user_id(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_payment(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_order_id(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_external_id(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_price(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_price_raw(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceRaw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_price_admin(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_status(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_Phone(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_account_name(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_va_number(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VaNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_desktop_url(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesktopURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_mobile_url(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MobileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_deep_link(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeepLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_qr_code(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QRCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_payment_code(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_expired_at(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_created_at(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentDetail_payment_method(ctx context.Context, field graphql.CollectedField, obj *model.PaymentDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PaymentDetail().PaymentMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PaymentMethod)
	fc.Result = res
	return ec.marshalNPaymentMethod2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentMethod(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_id(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_name(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_logo(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_status(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_type(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_expiration_time(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpirationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_admin_fee_fixed(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdminFeeFixed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_admin_fee_percent(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdminFeePercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_min_price(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMethod_max_price(ctx context.Context, field graphql.CollectedField, obj *model.PaymentMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_id(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_content(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_special_filter(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecialFilter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_cost_duration_bid(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CostDurationBid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_cost_view_bid(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CostViewBid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_cost_click_bid(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CostClickBid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_cost_conversion_bid(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CostConversionBid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_ads_placement_id(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsPlacementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_ads_content_id(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsContentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_ads_placement(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlacementContent().AdsPlacement(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsPlacement)
	fc.Result = res
	return ec.marshalNAdsPlacement2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacement(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_ads_content(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlacementContent().AdsContent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsContent)
	fc.Result = res
	return ec.marshalNAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_created_at(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PlacementContent_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.PlacementContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlacementContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_myAdsAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyAdsAccount(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdsAccount)
	fc.Result = res
	return ec.marshalNAdsAccount2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_myAccountInvitation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyAccountInvitation(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MyAccountInvitation)
	fc.Result = res
	return ec.marshalNMyAccountInvitation2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐMyAccountInvitationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_myAccountRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyAccountRequest(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MyAccountRequest)
	fc.Result = res
	return ec.marshalNMyAccountRequest2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐMyAccountRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listAdsPlacement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListAdsPlacement(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdsPlacement)
	fc.Result = res
	return ec.marshalNAdsPlacement2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllAdsAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAdsAccount(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SimpleAdsAccount)
	fc.Result = res
	return ec.marshalNSimpleAdsAccount2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐSimpleAdsAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllAdsContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAllAdsContent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAdsContent(rctx, args["limit"].(*int), args["utoken"].(string), args["accountId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ResponseAdsContent)
	fc.Result = res
	return ec.marshalOResponseAdsContent2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsContentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllAdsAudience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAllAdsAudience_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAdsAudience(rctx, args["limit"].(*int), args["utoken"].(string), args["accountId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ResponseAdsAudience)
	fc.Result = res
	return ec.marshalOResponseAdsAudience2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsAudienceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllAdsCamoaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAllAdsCamoaign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAdsCamoaign(rctx, args["limit"].(*int), args["utoken"].(string), args["accountId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ResponseAdsCampaign)
	fc.Result = res
	return ec.marshalOResponseAdsCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsCampaignᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAdsBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAdsBalance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAdsBalance(rctx, args["input"].(*model.InputQueryAdsBalance))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DataAdsBalance)
	fc.Result = res
	return ec.marshalNDataAdsBalance2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDataAdsBalance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAdsCampaignReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAdsCampaignReview(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DataAdsCampaign)
	fc.Result = res
	return ec.marshalNDataAdsCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐDataAdsCampaignᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAdsCampaignPublished(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAdsCampaignPublished(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DataAdsCampaign)
	fc.Result = res
	return ec.marshalNDataAdsCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐDataAdsCampaignᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllPaymentMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllPaymentMethod(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PaymentMethod)
	fc.Result = res
	return ec.marshalNPaymentMethod2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentMethodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDuePayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDuePayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDuePayment(rctx, args["adsAccountId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaymentDetail)
	fc.Result = res
	return ec.marshalOPaymentDetail2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_campaigns(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_campaigns_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Campaigns(rctx, args["filter"].(*model.CampaignsFilter), args["limit"].(*int), args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Campaign)
	fc.Result = res
	return ec.marshalNCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_adsContents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_adsContents_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdsContents(rctx, args["filter"].(*model.AdsContentsFilter), args["limit"].(*int), args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdsContent)
	fc.Result = res
	return ec.marshalNAdsContent2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_audiences(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_audiences_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Audiences(rctx, args["filter"].(*model.AudienceFilter), args["limit"].(*int), args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Audience)
	fc.Result = res
	return ec.marshalNAudience2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAudienceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_AudienceName(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudienceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_Location(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_Gender(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_Age(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_Interest(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_Published(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_Live(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Live, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_Draft(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Draft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_AudienceProperties(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudienceProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Audience)
	fc.Result = res
	return ec.marshalNAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsAudience_LatestUpdate(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsAudience) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsAudience",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestUpdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_NameCampaign(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameCampaign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_StatusCampaign(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusCampaign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_Objective(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Objective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_AudienceName(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudienceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_ContentName(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_Description(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_LatestUpdate(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestUpdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_CampaingProperties(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaingProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Campaign)
	fc.Result = res
	return ec.marshalNCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_AudienceProperties(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudienceProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Audience)
	fc.Result = res
	return ec.marshalNAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_ContentProperties(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContentProperty)
	fc.Result = res
	return ec.marshalNContentProperty2ᚖadsᚑmanagerᚋgraphᚋmodelᚐContentProperty(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsCampaign_RejectionHistory(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectionHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsContent_ContentName(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsContent_Placements(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Placements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AdsPlacement)
	fc.Result = res
	return ec.marshalOAdsPlacement2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsContent_Published(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsContent_Live(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Live, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsContent_Draft(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Draft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsContent_AdsContentProperties(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsContentProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdsContent)
	fc.Result = res
	return ec.marshalNAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsContent_LastUpdated(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsContent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsContent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsListAccount_adsAccountId(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsListAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsListAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseAdsListAccount_adsAccountName(ctx context.Context, field graphql.CollectedField, obj *model.ResponseAdsListAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseAdsListAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_adsInvitationId(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsInvitationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_userIdInviter(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserIDInviter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_userNameInviter(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserNameInviter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_userIdInvited(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserIDInvited, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_userNameInvited(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserNameInvited, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_userRoleInvited(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRoleInvited, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_adsAccountId(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_adsAccountName(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_invitationStatus(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvitationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_timestampCreated(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseCancelInvitation_timestampUpdated(ctx context.Context, field graphql.CollectedField, obj *model.ResponseCancelInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseCancelInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampUpdated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseEventCampaign_result(ctx context.Context, field graphql.CollectedField, obj *model.ResponseEventCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseEventCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseEventCampaign_campaign(ctx context.Context, field graphql.CollectedField, obj *model.ResponseEventCampaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseEventCampaign",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Campaign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Campaign)
	fc.Result = res
	return ec.marshalOCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseRespondInvitation_updatedInvitation(ctx context.Context, field graphql.CollectedField, obj *model.ResponseRespondInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseRespondInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedInvitation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdsAccountInvitation)
	fc.Result = res
	return ec.marshalOAdsAccountInvitation2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountInvitation(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseRespondInvitation_newAdsAccount(ctx context.Context, field graphql.CollectedField, obj *model.ResponseRespondInvitation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseRespondInvitation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewAdsAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdsAccount)
	fc.Result = res
	return ec.marshalOAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseSubcribe_event(ctx context.Context, field graphql.CollectedField, obj *model.ResponseSubcribe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseSubcribe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseSubcribe_properties(ctx context.Context, field graphql.CollectedField, obj *model.ResponseSubcribe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseSubcribe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PropertiesUpdate)
	fc.Result = res
	return ec.marshalNpropertiesUpdate2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐPropertiesUpdateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseToggleAdsPacement_id(ctx context.Context, field graphql.CollectedField, obj *model.ResponseToggleAdsPacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseToggleAdsPacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResponseToggleAdsPacement_is_active(ctx context.Context, field graphql.CollectedField, obj *model.ResponseToggleAdsPacement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResponseToggleAdsPacement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SimpleAdsAccount_id(ctx context.Context, field graphql.CollectedField, obj *model.SimpleAdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SimpleAdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SimpleAdsAccount_ads_account_name(ctx context.Context, field graphql.CollectedField, obj *model.SimpleAdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SimpleAdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdsAccountName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SimpleAdsAccount_account_type(ctx context.Context, field graphql.CollectedField, obj *model.SimpleAdsAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SimpleAdsAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialProperty_query_param(ctx context.Context, field graphql.CollectedField, obj *model.SpecialProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecialProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryParam, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialProperty_type(ctx context.Context, field graphql.CollectedField, obj *model.SpecialProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecialProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialProperty_url_source(ctx context.Context, field graphql.CollectedField, obj *model.SpecialProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecialProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URLSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialProperty_json_key_id(ctx context.Context, field graphql.CollectedField, obj *model.SpecialProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecialProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JSONKeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialProperty_json_key_label(ctx context.Context, field graphql.CollectedField, obj *model.SpecialProperty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpecialProperty",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JSONKeyLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_messageUpdateAdsPlacementEvent(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MessageUpdateAdsPlacementEvent(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.ResponseSubcribe)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNResponseSubcribe2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseSubcribe(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_fullname(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fullname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_profile_picture(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletAds_walletAdsId(ctx context.Context, field graphql.CollectedField, obj *model.WalletAds) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletAds",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletAdsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletAds_balance(ctx context.Context, field graphql.CollectedField, obj *model.WalletAds) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletAds",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletAds_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.WalletAds) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletAds",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _WalletAds_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.WalletAds) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WalletAds",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _propertiesUpdate_namePropertie(ctx context.Context, field graphql.CollectedField, obj *model.PropertiesUpdate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "propertiesUpdate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePropertie, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _propertiesUpdate_valuePropertie(ctx context.Context, field graphql.CollectedField, obj *model.PropertiesUpdate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "propertiesUpdate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValuePropertie, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAdsContentsFilter(ctx context.Context, obj interface{}) (model.AdsContentsFilter, error) {
	var it model.AdsContentsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_account_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_id"))
			it.AdsAccountID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "range_filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("range_filter"))
			it.RangeFilter, err = ec.unmarshalORangeFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐRangeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAudienceFilter(ctx context.Context, obj interface{}) (model.AudienceFilter, error) {
	var it model.AudienceFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_account_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_id"))
			it.AdsAccountID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "range_filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("range_filter"))
			it.RangeFilter, err = ec.unmarshalORangeFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐRangeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCampaignsFilter(ctx context.Context, obj interface{}) (model.CampaignsFilter, error) {
	var it model.CampaignsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_account_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_id"))
			it.AdsAccountID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "campaign_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaign_status"))
			it.CampaignStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "range_filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("range_filter"))
			it.RangeFilter, err = ec.unmarshalORangeFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐRangeFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAdsAccount(ctx context.Context, obj interface{}) (model.CreateAdsAccount, error) {
	var it model.CreateAdsAccount
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "adsAccountId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountId"))
			it.AdsAccountID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adsAccountName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountName"))
			it.AdsAccountName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adsAccountType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountType"))
			it.AdsAccountType, err = ec.unmarshalNAccountType2adsᚑmanagerᚋgraphᚋmodelᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
		case "walletAdsId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletAdsId"))
			it.WalletAdsID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessId"))
			it.BusinessID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAdsWalletAccount(ctx context.Context, obj interface{}) (model.CreateAdsWalletAccount, error) {
	var it model.CreateAdsWalletAccount
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "walletAdsId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("walletAdsId"))
			it.WalletAdsID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "balance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
			it.Balance, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditPropertiesAdsPlacement(ctx context.Context, obj interface{}) (model.EditPropertiesAdsPlacement, error) {
	var it model.EditPropertiesAdsPlacement
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "baseDurationCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseDurationCost"))
			it.BaseDurationCost, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "adsPlacementName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsPlacementName"))
			it.AdsPlacementName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "baseViewCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseViewCost"))
			it.BaseViewCost, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "viewCostIncremental":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("viewCostIncremental"))
			it.ViewCostIncremental, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "baseClickCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseClickCost"))
			it.BaseClickCost, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "clickCostIncrement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clickCostIncrement"))
			it.ClickCostIncrement, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "baseTransactionCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseTransactionCost"))
			it.BaseTransactionCost, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "incrementalTransactionCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incrementalTransactionCost"))
			it.IncrementalTransactionCost, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "discountCost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discountCost"))
			it.DiscountCost, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventCampaignPublished(ctx context.Context, obj interface{}) (model.EventCampaignPublished, error) {
	var it model.EventCampaignPublished
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventCampaignReview(ctx context.Context, obj interface{}) (model.EventCampaignReview, error) {
	var it model.EventCampaignReview
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputAdsContent(ctx context.Context, obj interface{}) (model.InputAdsContent, error) {
	var it model.InputAdsContent
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_account_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_id"))
			it.AdsAccountID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_content_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_content_name"))
			it.AdsContentName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "placement_contents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("placement_contents"))
			it.PlacementContents, err = ec.unmarshalOInputPlacementContent2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputPlacementContentᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputAdsPlacement(ctx context.Context, obj interface{}) (model.InputAdsPlacement, error) {
	var it model.InputAdsPlacement
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_placement_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_placement_name"))
			it.AdsPlacementName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "base_duration_cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_duration_cost"))
			it.BaseDurationCost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "base_view_cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_view_cost"))
			it.BaseViewCost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "view_cost_increment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("view_cost_increment"))
			it.ViewCostIncrement, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "base_click_cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_click_cost"))
			it.BaseClickCost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "click_cost_increment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("click_cost_increment"))
			it.ClickCostIncrement, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "base_conversion_cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_conversion_cost"))
			it.BaseConversionCost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "conversion_cost_increment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conversion_cost_increment"))
			it.ConversionCostIncrement, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount_percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount_percentage"))
			it.DiscountPercentage, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_discount_all":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_discount_all"))
			it.IsDiscountAll, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_properties":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_properties"))
			it.ContentProperties, err = ec.unmarshalNInputContentProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputContentPropertyᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "html_view":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("html_view"))
			it.HTMLView, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "special_filter_properties":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("special_filter_properties"))
			it.SpecialFilterProperties, err = ec.unmarshalOInputSpecialProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputSpecialPropertyᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_restricted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_restricted"))
			it.IsRestricted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "restricted_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("restricted_type"))
			it.RestrictedType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_clicked":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_clicked"))
			it.IsClicked, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_conversion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_conversion"))
			it.IsConversion, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_account_receiving_discounts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_receiving_discounts"))
			it.AdsAccountReceivingDiscounts, err = ec.unmarshalOInputId2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_account_restricted_placements":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_restricted_placements"))
			it.AdsAccountRestrictedPlacements, err = ec.unmarshalOInputId2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputAudience(ctx context.Context, obj interface{}) (model.InputAudience, error) {
	var it model.InputAudience
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_account_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_id"))
			it.AdsAccountID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "audience_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience_name"))
			it.AudienceName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "age":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("age"))
			it.Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interest"))
			it.Interest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locations"))
			it.Locations, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputCampaign(ctx context.Context, obj interface{}) (model.InputCampaign, error) {
	var it model.InputCampaign
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_account_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_id"))
			it.AdsAccountID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "audience_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience_id"))
			it.AudienceID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_content_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_content_id"))
			it.AdsContentID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "campaign_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaign_name"))
			it.CampaignName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "campaign_objective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaign_objective"))
			it.CampaignObjective, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "budget_limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("budget_limit"))
			it.BudgetLimit, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputCancelInvitation(ctx context.Context, obj interface{}) (model.InputCancelInvitation, error) {
	var it model.InputCancelInvitation
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "adsInvitationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsInvitationId"))
			it.AdsInvitationID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputContentProperty(ctx context.Context, obj interface{}) (model.InputContentProperty, error) {
	var it model.InputContentProperty
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "example_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("example_value"))
			it.ExampleValue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_source"))
			it.URLSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "json_key_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("json_key_id"))
			it.JSONKeyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "json_key_label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("json_key_label"))
			it.JSONKeyLabel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputEditAdsAccountName(ctx context.Context, obj interface{}) (model.InputEditAdsAccountName, error) {
	var it model.InputEditAdsAccountName
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "adsAccountId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountId"))
			it.AdsAccountID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adsAccountName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountName"))
			it.AdsAccountName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputEditAdsPlacement(ctx context.Context, obj interface{}) (model.InputEditAdsPlacement, error) {
	var it model.InputEditAdsPlacement
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_placement_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_placement_name"))
			it.AdsPlacementName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "base_duration_cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_duration_cost"))
			it.BaseDurationCost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "base_view_cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_view_cost"))
			it.BaseViewCost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "view_cost_increment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("view_cost_increment"))
			it.ViewCostIncrement, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "base_click_cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_click_cost"))
			it.BaseClickCost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "click_cost_increment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("click_cost_increment"))
			it.ClickCostIncrement, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "base_conversion_cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base_conversion_cost"))
			it.BaseConversionCost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "conversion_cost_increment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conversion_cost_increment"))
			it.ConversionCostIncrement, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount_percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount_percentage"))
			it.DiscountPercentage, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_discount_all":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_discount_all"))
			it.IsDiscountAll, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "content_properties":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content_properties"))
			it.ContentProperties, err = ec.unmarshalNInputContentProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputContentPropertyᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "html_view":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("html_view"))
			it.HTMLView, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "special_filter_properties":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("special_filter_properties"))
			it.SpecialFilterProperties, err = ec.unmarshalOInputSpecialProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputSpecialPropertyᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_restricted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_restricted"))
			it.IsRestricted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "restricted_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("restricted_type"))
			it.RestrictedType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_clicked":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_clicked"))
			it.IsClicked, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_conversion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_conversion"))
			it.IsConversion, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_account_receiving_discounts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_receiving_discounts"))
			it.AdsAccountReceivingDiscounts, err = ec.unmarshalOInputId2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_account_restricted_placements":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_restricted_placements"))
			it.AdsAccountRestrictedPlacements, err = ec.unmarshalOInputId2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputEditUserRole(ctx context.Context, obj interface{}) (model.InputEditUserRole, error) {
	var it model.InputEditUserRole
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "adsAccountId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountId"))
			it.AdsAccountID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "userRole":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userRole"))
			it.UserRole, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputId(ctx context.Context, obj interface{}) (model.InputID, error) {
	var it model.InputID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputInviteMember(ctx context.Context, obj interface{}) (model.InputInviteMember, error) {
	var it model.InputInviteMember
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "userIdInvited":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIdInvited"))
			it.UserIDInvited, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "adsAccountId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountId"))
			it.AdsAccountID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputLeaveAdsAccount(ctx context.Context, obj interface{}) (model.InputLeaveAdsAccount, error) {
	var it model.InputLeaveAdsAccount
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "adsAccountId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountId"))
			it.AdsAccountID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputPlacementContent(ctx context.Context, obj interface{}) (model.InputPlacementContent, error) {
	var it model.InputPlacementContent
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_placement_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_placement_id"))
			it.AdsPlacementID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "special_filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("special_filter"))
			it.SpecialFilter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_duration_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_duration_bid"))
			it.CostDurationBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_view_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_view_bid"))
			it.CostViewBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_click_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_click_bid"))
			it.CostClickBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_conversion_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_conversion_bid"))
			it.CostConversionBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputPlacementContentDirect(ctx context.Context, obj interface{}) (model.InputPlacementContentDirect, error) {
	var it model.InputPlacementContentDirect
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_placement_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_placement_id"))
			it.AdsPlacementID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_content_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_content_id"))
			it.AdsContentID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "special_filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("special_filter"))
			it.SpecialFilter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_duration_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_duration_bid"))
			it.CostDurationBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_view_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_view_bid"))
			it.CostViewBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_click_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_click_bid"))
			it.CostClickBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_conversion_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_conversion_bid"))
			it.CostConversionBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputQueryAdsBalance(ctx context.Context, obj interface{}) (model.InputQueryAdsBalance, error) {
	var it model.InputQueryAdsBalance
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ads_account_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_account_id"))
			it.AdsAccountID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputRespondInvitation(ctx context.Context, obj interface{}) (model.InputRespondInvitation, error) {
	var it model.InputRespondInvitation
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "adsInvitationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsInvitationId"))
			it.AdsInvitationID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "isApprove":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isApprove"))
			it.IsApprove, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputSelectApprover(ctx context.Context, obj interface{}) (model.InputSelectApprover, error) {
	var it model.InputSelectApprover
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "adsMemberId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsMemberId"))
			it.AdsMemberID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDisable":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDisable"))
			it.IsDisable, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputSpecialProperty(ctx context.Context, obj interface{}) (model.InputSpecialProperty, error) {
	var it model.InputSpecialProperty
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "query_param":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query_param"))
			it.QueryParam, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url_source"))
			it.URLSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "json_key_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("json_key_id"))
			it.JSONKeyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "json_key_label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("json_key_label"))
			it.JSONKeyLabel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputToggleAdsPlacement(ctx context.Context, obj interface{}) (model.InputToggleAdsPlacement, error) {
	var it model.InputToggleAdsPlacement
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputTopup(ctx context.Context, obj interface{}) (model.InputTopup, error) {
	var it model.InputTopup
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "payment_method_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_method_id"))
			it.PaymentMethodID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallet_ad_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallet_ad_id"))
			it.WalletAdID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputUpdateAdsContent(ctx context.Context, obj interface{}) (model.InputUpdateAdsContent, error) {
	var it model.InputUpdateAdsContent
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_content_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_content_name"))
			it.AdsContentName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputUpdateAudience(ctx context.Context, obj interface{}) (model.InputUpdateAudience, error) {
	var it model.InputUpdateAudience
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "audience_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience_name"))
			it.AudienceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "age":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("age"))
			it.Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interest"))
			it.Interest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locations"))
			it.Locations, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputUpdateCampaign(ctx context.Context, obj interface{}) (model.InputUpdateCampaign, error) {
	var it model.InputUpdateCampaign
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "audience_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audience_id"))
			it.AudienceID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ads_content_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ads_content_id"))
			it.AdsContentID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "campaign_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaign_name"))
			it.CampaignName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "campaign_objective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaign_objective"))
			it.CampaignObjective, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "campaign_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaign_status"))
			it.CampaignStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "budget_limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("budget_limit"))
			it.BudgetLimit, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputUpdatePlacementContent(ctx context.Context, obj interface{}) (model.InputUpdatePlacementContent, error) {
	var it model.InputUpdatePlacementContent
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "special_filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("special_filter"))
			it.SpecialFilter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_duration_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_duration_bid"))
			it.CostDurationBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_view_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_view_bid"))
			it.CostViewBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_click_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_click_bid"))
			it.CostClickBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost_conversion_bid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost_conversion_bid"))
			it.CostConversionBid, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRangeFilter(ctx context.Context, obj interface{}) (model.RangeFilter, error) {
	var it model.RangeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemoveUserFromAdsAccount(ctx context.Context, obj interface{}) (model.RemoveUserFromAdsAccount, error) {
	var it model.RemoveUserFromAdsAccount
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "adsAccountId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adsAccountId"))
			it.AdsAccountID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var adsAccountImplementors = []string{"AdsAccount"}

func (ec *executionContext) _AdsAccount(ctx context.Context, sel ast.SelectionSet, obj *model.AdsAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adsAccountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdsAccount")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_ads_account_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_account_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_user(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "business":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_business(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "approver_mode":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_approver_mode(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "wallet_ad_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_wallet_ad_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account_members":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccount_ads_account_members(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adsAccountInvitationImplementors = []string{"AdsAccountInvitation"}

func (ec *executionContext) _AdsAccountInvitation(ctx context.Context, sel ast.SelectionSet, obj *model.AdsAccountInvitation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adsAccountInvitationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdsAccountInvitation")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountInvitation_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountInvitation_ads_account_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountInvitation_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_invitation_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountInvitation_ads_invitation_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_inviter_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountInvitation_user_inviter_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_invited_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountInvitation_user_invited_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountInvitation_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountInvitation_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adsAccountMemberImplementors = []string{"AdsAccountMember"}

func (ec *executionContext) _AdsAccountMember(ctx context.Context, sel ast.SelectionSet, obj *model.AdsAccountMember) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adsAccountMemberImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdsAccountMember")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountMember_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountMember_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_approver":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountMember_is_approver(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_me":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountMember_is_me(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "user":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountMember_user(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountMember_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountMember_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adsAccountReceivingDiscountImplementors = []string{"AdsAccountReceivingDiscount"}

func (ec *executionContext) _AdsAccountReceivingDiscount(ctx context.Context, sel ast.SelectionSet, obj *model.AdsAccountReceivingDiscount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adsAccountReceivingDiscountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdsAccountReceivingDiscount")
		case "placementAdsAccountDsicount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountReceivingDiscount_placementAdsAccountDsicount(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "adsAccountId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountReceivingDiscount_adsAccountId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "adsPlacementId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsAccountReceivingDiscount_adsPlacementId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adsContentImplementors = []string{"AdsContent"}

func (ec *executionContext) _AdsContent(ctx context.Context, sel ast.SelectionSet, obj *model.AdsContent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adsContentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdsContent")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsContent_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ads_account_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsContent_ads_account_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ads_content_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsContent_ads_content_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsContent_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsContent_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "placement_contents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AdsContent_placement_contents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "campaigns":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AdsContent_campaigns(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adsPlacementImplementors = []string{"AdsPlacement"}

func (ec *executionContext) _AdsPlacement(ctx context.Context, sel ast.SelectionSet, obj *model.AdsPlacement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adsPlacementImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdsPlacement")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_placement_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_ads_placement_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "base_duration_cost":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_base_duration_cost(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "base_view_cost":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_base_view_cost(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "view_cost_increment":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_view_cost_increment(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "base_click_cost":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_base_click_cost(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "click_cost_increment":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_click_cost_increment(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "base_conversion_cost":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_base_conversion_cost(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "conversion_cost_increment":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_conversion_cost_increment(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "discount_percentage":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_discount_percentage(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_discount_all":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_is_discount_all(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_is_active(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content_properties":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_content_properties(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "html_view":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_html_view(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "special_filter_properties":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_special_filter_properties(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_restricted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_is_restricted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "restricted_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_restricted_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "is_clicked":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_is_clicked(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_conversion":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_is_conversion(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account_receiving_discounts":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_ads_account_receiving_discounts(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account_restricted_placements":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AdsPlacement_ads_account_restricted_placements(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var audienceImplementors = []string{"Audience"}

func (ec *executionContext) _Audience(ctx context.Context, sel ast.SelectionSet, obj *model.Audience) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, audienceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Audience")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ads_account_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_ads_account_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "address":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_address(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "audience_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_audience_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "age":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_age(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "gender":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_gender(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "interest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_interest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "locations":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Audience_locations(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "campaigns":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Audience_campaigns(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessImplementors = []string{"Business"}

func (ec *executionContext) _Business(ctx context.Context, sel ast.SelectionSet, obj *model.Business) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Business")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Business_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Business_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Business_owner(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var campaignImplementors = []string{"Campaign"}

func (ec *executionContext) _Campaign(ctx context.Context, sel ast.SelectionSet, obj *model.Campaign) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, campaignImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Campaign")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ads_account_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_ads_account_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "audience_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_audience_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ads_content_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_ads_content_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "campaign_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_campaign_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "campaign_objective":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_campaign_objective(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "end_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_end_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "budget_limit":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_budget_limit(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "campaign_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_campaign_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Campaign_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "audience":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Campaign_audience(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ads_content":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Campaign_ads_content(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "campaign_histories":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Campaign_campaign_histories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var campaignHistoriesImplementors = []string{"CampaignHistories"}

func (ec *executionContext) _CampaignHistories(ctx context.Context, sel ast.SelectionSet, obj *model.CampaignHistories) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, campaignHistoriesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CampaignHistories")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CampaignHistories_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CampaignHistories_reason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "recorded_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CampaignHistories_recorded_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CampaignHistories_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "user_id_actor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CampaignHistories_user_id_actor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CampaignHistories_user_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CampaignHistories_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._CampaignHistories_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contentPropertyImplementors = []string{"ContentProperty"}

func (ec *executionContext) _ContentProperty(ctx context.Context, sel ast.SelectionSet, obj *model.ContentProperty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentPropertyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentProperty")
		case "key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContentProperty_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContentProperty_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "example_value":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContentProperty_example_value(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url_source":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContentProperty_url_source(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "json_key_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContentProperty_json_key_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "json_key_label":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ContentProperty_json_key_label(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataAdsBalanceImplementors = []string{"DataAdsBalance"}

func (ec *executionContext) _DataAdsBalance(ctx context.Context, sel ast.SelectionSet, obj *model.DataAdsBalance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataAdsBalanceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataAdsBalance")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataAdsBalance_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataAdsBalance_ads_account_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "current_balance":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataAdsBalance_current_balance(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "history_spending":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataAdsBalance_history_spending(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "history_topup":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataAdsBalance_history_topup(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataAdsCampaignImplementors = []string{"DataAdsCampaign"}

func (ec *executionContext) _DataAdsCampaign(ctx context.Context, sel ast.SelectionSet, obj *model.DataAdsCampaign) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataAdsCampaignImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataAdsCampaign")
		case "campaign":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataAdsCampaign_campaign(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "audience":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataAdsCampaign_audience(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "content":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DataAdsCampaign_content(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deletedAdsContentImplementors = []string{"DeletedAdsContent"}

func (ec *executionContext) _DeletedAdsContent(ctx context.Context, sel ast.SelectionSet, obj *model.DeletedAdsContent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletedAdsContentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletedAdsContent")
		case "result":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DeletedAdsContent_result(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_content":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DeletedAdsContent_ads_content(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deletedAudienceImplementors = []string{"DeletedAudience"}

func (ec *executionContext) _DeletedAudience(ctx context.Context, sel ast.SelectionSet, obj *model.DeletedAudience) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletedAudienceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletedAudience")
		case "result":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DeletedAudience_result(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "audience":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DeletedAudience_audience(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deletedCampaignImplementors = []string{"DeletedCampaign"}

func (ec *executionContext) _DeletedCampaign(ctx context.Context, sel ast.SelectionSet, obj *model.DeletedCampaign) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletedCampaignImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletedCampaign")
		case "result":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DeletedCampaign_result(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "campaign":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DeletedCampaign_campaign(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deletedPlacementContentImplementors = []string{"DeletedPlacementContent"}

func (ec *executionContext) _DeletedPlacementContent(ctx context.Context, sel ast.SelectionSet, obj *model.DeletedPlacementContent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletedPlacementContentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletedPlacementContent")
		case "result":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DeletedPlacementContent_result(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "placement_content":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DeletedPlacementContent_placement_content(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var historySpendingImplementors = []string{"HistorySpending"}

func (ec *executionContext) _HistorySpending(ctx context.Context, sel ast.SelectionSet, obj *model.HistorySpending) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historySpendingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistorySpending")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistorySpending_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "wallet_ad_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistorySpending_wallet_ad_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "amount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistorySpending_amount(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistorySpending_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistorySpending_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "campaign_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistorySpending_campaign_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "campaign_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistorySpending_campaign_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "campaign_objective":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistorySpending_campaign_objective(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var historyTopupImplementors = []string{"HistoryTopup"}

func (ec *executionContext) _HistoryTopup(ctx context.Context, sel ast.SelectionSet, obj *model.HistoryTopup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historyTopupImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistoryTopup")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "wallet_ad_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_wallet_ad_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "amount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_amount(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "admin_fee":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_admin_fee(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_user_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topup_method_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_topup_method_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topup_method_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_topup_method_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expired_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_expired_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_success":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._HistoryTopup_is_success(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "updateAdsAccountName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAdsAccountName(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeUserFromAdsAccount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeUserFromAdsAccount(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selectApprover":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_selectApprover(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "leaveAdsAccount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_leaveAdsAccount(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editUserRole":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_editUserRole(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inviteMember":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_inviteMember(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "respondInvitation":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_respondInvitation(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelInvitation":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelInvitation(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAdsPlacement":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAdsPlacement(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editAdsPlacement":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_editAdsPlacement(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "toggleAdsPlacement":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_toggleAdsPlacement(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editStatusCampaignReview":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_editStatusCampaignReview(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editStatusCampaignPublished":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_editStatusCampaignPublished(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topupPayment":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_topupPayment(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkPayment":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_checkPayment(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCampaign":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCampaign(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAudience":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAudience(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAdsContent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAdsContent(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPlacementContent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlacementContent(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCampaign":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCampaign(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAudience":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAudience(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAdsContent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAdsContent(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlacementContent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlacementContent(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCampaign":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCampaign(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAudience":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAudience(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAdsContent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAdsContent(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlacementContent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlacementContent(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "publishCampaign":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_publishCampaign(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var myAccountInvitationImplementors = []string{"MyAccountInvitation"}

func (ec *executionContext) _MyAccountInvitation(ctx context.Context, sel ast.SelectionSet, obj *model.MyAccountInvitation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, myAccountInvitationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MyAccountInvitation")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountInvitation_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountInvitation_ads_account(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountInvitation_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_invitation_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountInvitation_ads_invitation_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_inviter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountInvitation_user_inviter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountInvitation_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountInvitation_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var myAccountRequestImplementors = []string{"MyAccountRequest"}

func (ec *executionContext) _MyAccountRequest(ctx context.Context, sel ast.SelectionSet, obj *model.MyAccountRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, myAccountRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MyAccountRequest")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountRequest_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountRequest_ads_account(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountRequest_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_invitation_status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountRequest_ads_invitation_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_invited":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountRequest_user_invited(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountRequest_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MyAccountRequest_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nestedAdsAccountImplementors = []string{"NestedAdsAccount"}

func (ec *executionContext) _NestedAdsAccount(ctx context.Context, sel ast.SelectionSet, obj *model.NestedAdsAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nestedAdsAccountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NestedAdsAccount")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._NestedAdsAccount_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._NestedAdsAccount_ads_account_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._NestedAdsAccount_account_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._NestedAdsAccount_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._NestedAdsAccount_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentDetailImplementors = []string{"PaymentDetail"}

func (ec *executionContext) _PaymentDetail(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentDetailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentDetail")
		case "partner_transaction_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_partner_transaction_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_user_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "payment":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_payment(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "order_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_order_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "external_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_external_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_price(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price_raw":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_price_raw(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "price_admin":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_price_admin(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Phone":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_Phone(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "account_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_account_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "va_number":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_va_number(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "desktop_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_desktop_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "mobile_url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_mobile_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deep_link":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_deep_link(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "qr_code":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_qr_code(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "payment_code":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_payment_code(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "expired_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_expired_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentDetail_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "payment_method":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PaymentDetail_payment_method(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentMethodImplementors = []string{"PaymentMethod"}

func (ec *executionContext) _PaymentMethod(ctx context.Context, sel ast.SelectionSet, obj *model.PaymentMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentMethodImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentMethod")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logo":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_logo(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiration_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_expiration_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "admin_fee_fixed":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_admin_fee_fixed(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "admin_fee_percent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_admin_fee_percent(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "min_price":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_min_price(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "max_price":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PaymentMethod_max_price(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var placementContentImplementors = []string{"PlacementContent"}

func (ec *executionContext) _PlacementContent(ctx context.Context, sel ast.SelectionSet, obj *model.PlacementContent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, placementContentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlacementContent")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "content":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_content(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "special_filter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_special_filter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cost_duration_bid":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_cost_duration_bid(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cost_view_bid":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_cost_view_bid(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cost_click_bid":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_cost_click_bid(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cost_conversion_bid":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_cost_conversion_bid(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ads_placement_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_ads_placement_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ads_content_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_ads_content_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ads_placement":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlacementContent_ads_placement(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ads_content":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlacementContent_ads_content(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_created_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PlacementContent_updated_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "myAdsAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myAdsAccount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "myAccountInvitation":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myAccountInvitation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "myAccountRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myAccountRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listAdsPlacement":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listAdsPlacement(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllAdsAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAdsAccount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllAdsContent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAdsContent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllAdsAudience":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAdsAudience(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllAdsCamoaign":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAdsCamoaign(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAdsBalance":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAdsBalance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAdsCampaignReview":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAdsCampaignReview(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAdsCampaignPublished":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAdsCampaignPublished(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllPaymentMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllPaymentMethod(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getDuePayment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDuePayment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "campaigns":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_campaigns(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "adsContents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_adsContents(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "audiences":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_audiences(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "__schema":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseAdsAudienceImplementors = []string{"ResponseAdsAudience"}

func (ec *executionContext) _ResponseAdsAudience(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseAdsAudience) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseAdsAudienceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseAdsAudience")
		case "AudienceName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_AudienceName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Location":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_Location(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Gender":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_Gender(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Age":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_Age(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Interest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_Interest(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Published":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_Published(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Live":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_Live(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Draft":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_Draft(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AudienceProperties":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_AudienceProperties(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "LatestUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsAudience_LatestUpdate(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseAdsCampaignImplementors = []string{"ResponseAdsCampaign"}

func (ec *executionContext) _ResponseAdsCampaign(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseAdsCampaign) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseAdsCampaignImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseAdsCampaign")
		case "NameCampaign":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_NameCampaign(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "StatusCampaign":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_StatusCampaign(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Objective":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_Objective(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AudienceName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_AudienceName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ContentName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_ContentName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_Description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "LatestUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_LatestUpdate(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CampaingProperties":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_CampaingProperties(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AudienceProperties":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_AudienceProperties(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ContentProperties":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_ContentProperties(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RejectionHistory":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsCampaign_RejectionHistory(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseAdsContentImplementors = []string{"ResponseAdsContent"}

func (ec *executionContext) _ResponseAdsContent(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseAdsContent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseAdsContentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseAdsContent")
		case "ContentName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsContent_ContentName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Placements":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsContent_Placements(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "Published":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsContent_Published(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Live":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsContent_Live(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Draft":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsContent_Draft(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AdsContentProperties":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsContent_AdsContentProperties(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "LastUpdated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsContent_LastUpdated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseAdsListAccountImplementors = []string{"ResponseAdsListAccount"}

func (ec *executionContext) _ResponseAdsListAccount(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseAdsListAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseAdsListAccountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseAdsListAccount")
		case "adsAccountId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsListAccount_adsAccountId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "adsAccountName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseAdsListAccount_adsAccountName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseCancelInvitationImplementors = []string{"ResponseCancelInvitation"}

func (ec *executionContext) _ResponseCancelInvitation(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseCancelInvitation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseCancelInvitationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseCancelInvitation")
		case "adsInvitationId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_adsInvitationId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userIdInviter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_userIdInviter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userNameInviter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_userNameInviter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userIdInvited":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_userIdInvited(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userNameInvited":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_userNameInvited(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userRoleInvited":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_userRoleInvited(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "adsAccountId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_adsAccountId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "adsAccountName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_adsAccountName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "invitationStatus":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_invitationStatus(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timestampCreated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_timestampCreated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timestampUpdated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseCancelInvitation_timestampUpdated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseEventCampaignImplementors = []string{"ResponseEventCampaign"}

func (ec *executionContext) _ResponseEventCampaign(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseEventCampaign) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseEventCampaignImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseEventCampaign")
		case "result":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseEventCampaign_result(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "campaign":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseEventCampaign_campaign(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseRespondInvitationImplementors = []string{"ResponseRespondInvitation"}

func (ec *executionContext) _ResponseRespondInvitation(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseRespondInvitation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseRespondInvitationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseRespondInvitation")
		case "updatedInvitation":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseRespondInvitation_updatedInvitation(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "newAdsAccount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseRespondInvitation_newAdsAccount(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseSubcribeImplementors = []string{"ResponseSubcribe"}

func (ec *executionContext) _ResponseSubcribe(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseSubcribe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseSubcribeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseSubcribe")
		case "event":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseSubcribe_event(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "properties":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseSubcribe_properties(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseToggleAdsPacementImplementors = []string{"ResponseToggleAdsPacement"}

func (ec *executionContext) _ResponseToggleAdsPacement(ctx context.Context, sel ast.SelectionSet, obj *model.ResponseToggleAdsPacement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseToggleAdsPacementImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseToggleAdsPacement")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseToggleAdsPacement_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ResponseToggleAdsPacement_is_active(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var simpleAdsAccountImplementors = []string{"SimpleAdsAccount"}

func (ec *executionContext) _SimpleAdsAccount(ctx context.Context, sel ast.SelectionSet, obj *model.SimpleAdsAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, simpleAdsAccountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SimpleAdsAccount")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SimpleAdsAccount_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ads_account_name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SimpleAdsAccount_ads_account_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SimpleAdsAccount_account_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var specialPropertyImplementors = []string{"SpecialProperty"}

func (ec *executionContext) _SpecialProperty(ctx context.Context, sel ast.SelectionSet, obj *model.SpecialProperty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, specialPropertyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpecialProperty")
		case "query_param":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SpecialProperty_query_param(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SpecialProperty_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url_source":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SpecialProperty_url_source(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "json_key_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SpecialProperty_json_key_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "json_key_label":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SpecialProperty_json_key_label(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "messageUpdateAdsPlacementEvent":
		return ec._Subscription_messageUpdateAdsPlacementEvent(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fullname":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_fullname(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_username(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profile_picture":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_profile_picture(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var walletAdsImplementors = []string{"WalletAds"}

func (ec *executionContext) _WalletAds(ctx context.Context, sel ast.SelectionSet, obj *model.WalletAds) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, walletAdsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WalletAds")
		case "walletAdsId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._WalletAds_walletAdsId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "balance":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._WalletAds_balance(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._WalletAds_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._WalletAds_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "locations":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_locations(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_isRepeatable(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_defaultValue(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "types":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_types(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_queryType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_mutationType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subscriptionType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_subscriptionType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "directives":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_directives(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_kind(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_fields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "interfaces":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_interfaces(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "possibleTypes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_possibleTypes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "enumValues":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_enumValues(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "inputFields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_inputFields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ofType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_ofType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "specifiedByURL":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_specifiedByURL(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var propertiesUpdateImplementors = []string{"propertiesUpdate"}

func (ec *executionContext) _propertiesUpdate(ctx context.Context, sel ast.SelectionSet, obj *model.PropertiesUpdate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, propertiesUpdateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("propertiesUpdate")
		case "namePropertie":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._propertiesUpdate_namePropertie(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "valuePropertie":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._propertiesUpdate_valuePropertie(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAccountType2adsᚑmanagerᚋgraphᚋmodelᚐAccountType(ctx context.Context, v interface{}) (model.AccountType, error) {
	var res model.AccountType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountType2adsᚑmanagerᚋgraphᚋmodelᚐAccountType(ctx context.Context, sel ast.SelectionSet, v model.AccountType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAdsAccount2adsᚑmanagerᚋgraphᚋmodelᚐAdsAccount(ctx context.Context, sel ast.SelectionSet, v model.AdsAccount) graphql.Marshaler {
	return ec._AdsAccount(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdsAccount2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdsAccount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccount(ctx context.Context, sel ast.SelectionSet, v *model.AdsAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdsAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNAdsAccountInvitation2adsᚑmanagerᚋgraphᚋmodelᚐAdsAccountInvitation(ctx context.Context, sel ast.SelectionSet, v model.AdsAccountInvitation) graphql.Marshaler {
	return ec._AdsAccountInvitation(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdsAccountInvitation2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountInvitation(ctx context.Context, sel ast.SelectionSet, v *model.AdsAccountInvitation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdsAccountInvitation(ctx, sel, v)
}

func (ec *executionContext) marshalNAdsAccountMember2adsᚑmanagerᚋgraphᚋmodelᚐAdsAccountMember(ctx context.Context, sel ast.SelectionSet, v model.AdsAccountMember) graphql.Marshaler {
	return ec._AdsAccountMember(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdsAccountMember2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountMember(ctx context.Context, sel ast.SelectionSet, v *model.AdsAccountMember) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdsAccountMember(ctx, sel, v)
}

func (ec *executionContext) marshalNAdsContent2adsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx context.Context, sel ast.SelectionSet, v model.AdsContent) graphql.Marshaler {
	return ec._AdsContent(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdsContent2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdsContent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx context.Context, sel ast.SelectionSet, v *model.AdsContent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdsContent(ctx, sel, v)
}

func (ec *executionContext) marshalNAdsPlacement2adsᚑmanagerᚋgraphᚋmodelᚐAdsPlacement(ctx context.Context, sel ast.SelectionSet, v model.AdsPlacement) graphql.Marshaler {
	return ec._AdsPlacement(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdsPlacement2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacementᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdsPlacement) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdsPlacement2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdsPlacement2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacement(ctx context.Context, sel ast.SelectionSet, v *model.AdsPlacement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdsPlacement(ctx, sel, v)
}

func (ec *executionContext) marshalNAudience2adsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx context.Context, sel ast.SelectionSet, v model.Audience) graphql.Marshaler {
	return ec._Audience(ctx, sel, &v)
}

func (ec *executionContext) marshalNAudience2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAudienceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Audience) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx context.Context, sel ast.SelectionSet, v *model.Audience) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Audience(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCampaign2adsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx context.Context, sel ast.SelectionSet, v model.Campaign) graphql.Marshaler {
	return ec._Campaign(ctx, sel, &v)
}

func (ec *executionContext) marshalNCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Campaign) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx context.Context, sel ast.SelectionSet, v *model.Campaign) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Campaign(ctx, sel, v)
}

func (ec *executionContext) marshalNCampaignHistories2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignHistoriesᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CampaignHistories) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCampaignHistories2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignHistories(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCampaignHistories2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignHistories(ctx context.Context, sel ast.SelectionSet, v *model.CampaignHistories) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CampaignHistories(ctx, sel, v)
}

func (ec *executionContext) marshalNContentProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐContentPropertyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ContentProperty) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContentProperty2ᚖadsᚑmanagerᚋgraphᚋmodelᚐContentProperty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContentProperty2ᚖadsᚑmanagerᚋgraphᚋmodelᚐContentProperty(ctx context.Context, sel ast.SelectionSet, v *model.ContentProperty) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ContentProperty(ctx, sel, v)
}

func (ec *executionContext) marshalNDataAdsBalance2adsᚑmanagerᚋgraphᚋmodelᚐDataAdsBalance(ctx context.Context, sel ast.SelectionSet, v model.DataAdsBalance) graphql.Marshaler {
	return ec._DataAdsBalance(ctx, sel, &v)
}

func (ec *executionContext) marshalNDataAdsBalance2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDataAdsBalance(ctx context.Context, sel ast.SelectionSet, v *model.DataAdsBalance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DataAdsBalance(ctx, sel, v)
}

func (ec *executionContext) marshalNDataAdsCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐDataAdsCampaignᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DataAdsCampaign) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataAdsCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDataAdsCampaign(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDataAdsCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDataAdsCampaign(ctx context.Context, sel ast.SelectionSet, v *model.DataAdsCampaign) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DataAdsCampaign(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletedAdsContent2adsᚑmanagerᚋgraphᚋmodelᚐDeletedAdsContent(ctx context.Context, sel ast.SelectionSet, v model.DeletedAdsContent) graphql.Marshaler {
	return ec._DeletedAdsContent(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeletedAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDeletedAdsContent(ctx context.Context, sel ast.SelectionSet, v *model.DeletedAdsContent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeletedAdsContent(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletedAudience2adsᚑmanagerᚋgraphᚋmodelᚐDeletedAudience(ctx context.Context, sel ast.SelectionSet, v model.DeletedAudience) graphql.Marshaler {
	return ec._DeletedAudience(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeletedAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDeletedAudience(ctx context.Context, sel ast.SelectionSet, v *model.DeletedAudience) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeletedAudience(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletedCampaign2adsᚑmanagerᚋgraphᚋmodelᚐDeletedCampaign(ctx context.Context, sel ast.SelectionSet, v model.DeletedCampaign) graphql.Marshaler {
	return ec._DeletedCampaign(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeletedCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDeletedCampaign(ctx context.Context, sel ast.SelectionSet, v *model.DeletedCampaign) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeletedCampaign(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletedPlacementContent2adsᚑmanagerᚋgraphᚋmodelᚐDeletedPlacementContent(ctx context.Context, sel ast.SelectionSet, v model.DeletedPlacementContent) graphql.Marshaler {
	return ec._DeletedPlacementContent(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeletedPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐDeletedPlacementContent(ctx context.Context, sel ast.SelectionSet, v *model.DeletedPlacementContent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeletedPlacementContent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEventCampaignPublished2adsᚑmanagerᚋgraphᚋmodelᚐEventCampaignPublished(ctx context.Context, v interface{}) (model.EventCampaignPublished, error) {
	res, err := ec.unmarshalInputEventCampaignPublished(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventCampaignReview2adsᚑmanagerᚋgraphᚋmodelᚐEventCampaignReview(ctx context.Context, v interface{}) (model.EventCampaignReview, error) {
	res, err := ec.unmarshalInputEventCampaignReview(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInputAdsPlacement2adsᚑmanagerᚋgraphᚋmodelᚐInputAdsPlacement(ctx context.Context, v interface{}) (model.InputAdsPlacement, error) {
	res, err := ec.unmarshalInputInputAdsPlacement(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputCancelInvitation2adsᚑmanagerᚋgraphᚋmodelᚐInputCancelInvitation(ctx context.Context, v interface{}) (model.InputCancelInvitation, error) {
	res, err := ec.unmarshalInputInputCancelInvitation(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputContentProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputContentPropertyᚄ(ctx context.Context, v interface{}) ([]*model.InputContentProperty, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.InputContentProperty, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInputContentProperty2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputContentProperty(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNInputContentProperty2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputContentProperty(ctx context.Context, v interface{}) (*model.InputContentProperty, error) {
	res, err := ec.unmarshalInputInputContentProperty(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputEditAdsAccountName2adsᚑmanagerᚋgraphᚋmodelᚐInputEditAdsAccountName(ctx context.Context, v interface{}) (model.InputEditAdsAccountName, error) {
	res, err := ec.unmarshalInputInputEditAdsAccountName(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputEditAdsPlacement2adsᚑmanagerᚋgraphᚋmodelᚐInputEditAdsPlacement(ctx context.Context, v interface{}) (model.InputEditAdsPlacement, error) {
	res, err := ec.unmarshalInputInputEditAdsPlacement(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputEditUserRole2adsᚑmanagerᚋgraphᚋmodelᚐInputEditUserRole(ctx context.Context, v interface{}) (model.InputEditUserRole, error) {
	res, err := ec.unmarshalInputInputEditUserRole(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputId2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputID(ctx context.Context, v interface{}) (*model.InputID, error) {
	res, err := ec.unmarshalInputInputId(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputInviteMember2adsᚑmanagerᚋgraphᚋmodelᚐInputInviteMember(ctx context.Context, v interface{}) (model.InputInviteMember, error) {
	res, err := ec.unmarshalInputInputInviteMember(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputLeaveAdsAccount2adsᚑmanagerᚋgraphᚋmodelᚐInputLeaveAdsAccount(ctx context.Context, v interface{}) (model.InputLeaveAdsAccount, error) {
	res, err := ec.unmarshalInputInputLeaveAdsAccount(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputPlacementContent(ctx context.Context, v interface{}) (*model.InputPlacementContent, error) {
	res, err := ec.unmarshalInputInputPlacementContent(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputRespondInvitation2adsᚑmanagerᚋgraphᚋmodelᚐInputRespondInvitation(ctx context.Context, v interface{}) (model.InputRespondInvitation, error) {
	res, err := ec.unmarshalInputInputRespondInvitation(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputSelectApprover2adsᚑmanagerᚋgraphᚋmodelᚐInputSelectApprover(ctx context.Context, v interface{}) (model.InputSelectApprover, error) {
	res, err := ec.unmarshalInputInputSelectApprover(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputSpecialProperty2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputSpecialProperty(ctx context.Context, v interface{}) (*model.InputSpecialProperty, error) {
	res, err := ec.unmarshalInputInputSpecialProperty(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputToggleAdsPlacement2adsᚑmanagerᚋgraphᚋmodelᚐInputToggleAdsPlacement(ctx context.Context, v interface{}) (model.InputToggleAdsPlacement, error) {
	res, err := ec.unmarshalInputInputToggleAdsPlacement(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNMyAccountInvitation2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐMyAccountInvitationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MyAccountInvitation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMyAccountInvitation2ᚖadsᚑmanagerᚋgraphᚋmodelᚐMyAccountInvitation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMyAccountInvitation2ᚖadsᚑmanagerᚋgraphᚋmodelᚐMyAccountInvitation(ctx context.Context, sel ast.SelectionSet, v *model.MyAccountInvitation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MyAccountInvitation(ctx, sel, v)
}

func (ec *executionContext) marshalNMyAccountRequest2adsᚑmanagerᚋgraphᚋmodelᚐMyAccountRequest(ctx context.Context, sel ast.SelectionSet, v model.MyAccountRequest) graphql.Marshaler {
	return ec._MyAccountRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNMyAccountRequest2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐMyAccountRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MyAccountRequest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMyAccountRequest2ᚖadsᚑmanagerᚋgraphᚋmodelᚐMyAccountRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMyAccountRequest2ᚖadsᚑmanagerᚋgraphᚋmodelᚐMyAccountRequest(ctx context.Context, sel ast.SelectionSet, v *model.MyAccountRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MyAccountRequest(ctx, sel, v)
}

func (ec *executionContext) marshalNNestedAdsAccount2adsᚑmanagerᚋgraphᚋmodelᚐNestedAdsAccount(ctx context.Context, sel ast.SelectionSet, v model.NestedAdsAccount) graphql.Marshaler {
	return ec._NestedAdsAccount(ctx, sel, &v)
}

func (ec *executionContext) marshalNNestedAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐNestedAdsAccount(ctx context.Context, sel ast.SelectionSet, v *model.NestedAdsAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NestedAdsAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNPaymentDetail2adsᚑmanagerᚋgraphᚋmodelᚐPaymentDetail(ctx context.Context, sel ast.SelectionSet, v model.PaymentDetail) graphql.Marshaler {
	return ec._PaymentDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentDetail2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentDetail(ctx context.Context, sel ast.SelectionSet, v *model.PaymentDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentDetail(ctx, sel, v)
}

func (ec *executionContext) marshalNPaymentMethod2adsᚑmanagerᚋgraphᚋmodelᚐPaymentMethod(ctx context.Context, sel ast.SelectionSet, v model.PaymentMethod) graphql.Marshaler {
	return ec._PaymentMethod(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaymentMethod2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentMethodᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PaymentMethod) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPaymentMethod2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentMethod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPaymentMethod2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentMethod(ctx context.Context, sel ast.SelectionSet, v *model.PaymentMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PaymentMethod(ctx, sel, v)
}

func (ec *executionContext) marshalNPlacementContent2adsᚑmanagerᚋgraphᚋmodelᚐPlacementContent(ctx context.Context, sel ast.SelectionSet, v model.PlacementContent) graphql.Marshaler {
	return ec._PlacementContent(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlacementContent2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐPlacementContentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PlacementContent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPlacementContent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPlacementContent(ctx context.Context, sel ast.SelectionSet, v *model.PlacementContent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PlacementContent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRemoveUserFromAdsAccount2adsᚑmanagerᚋgraphᚋmodelᚐRemoveUserFromAdsAccount(ctx context.Context, v interface{}) (model.RemoveUserFromAdsAccount, error) {
	res, err := ec.unmarshalInputRemoveUserFromAdsAccount(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResponseAdsAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsAudience(ctx context.Context, sel ast.SelectionSet, v *model.ResponseAdsAudience) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResponseAdsAudience(ctx, sel, v)
}

func (ec *executionContext) marshalNResponseAdsCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsCampaign(ctx context.Context, sel ast.SelectionSet, v *model.ResponseAdsCampaign) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResponseAdsCampaign(ctx, sel, v)
}

func (ec *executionContext) marshalNResponseAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsContent(ctx context.Context, sel ast.SelectionSet, v *model.ResponseAdsContent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResponseAdsContent(ctx, sel, v)
}

func (ec *executionContext) marshalNResponseEventCampaign2adsᚑmanagerᚋgraphᚋmodelᚐResponseEventCampaign(ctx context.Context, sel ast.SelectionSet, v model.ResponseEventCampaign) graphql.Marshaler {
	return ec._ResponseEventCampaign(ctx, sel, &v)
}

func (ec *executionContext) marshalNResponseEventCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseEventCampaign(ctx context.Context, sel ast.SelectionSet, v *model.ResponseEventCampaign) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResponseEventCampaign(ctx, sel, v)
}

func (ec *executionContext) marshalNResponseRespondInvitation2adsᚑmanagerᚋgraphᚋmodelᚐResponseRespondInvitation(ctx context.Context, sel ast.SelectionSet, v model.ResponseRespondInvitation) graphql.Marshaler {
	return ec._ResponseRespondInvitation(ctx, sel, &v)
}

func (ec *executionContext) marshalNResponseRespondInvitation2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseRespondInvitation(ctx context.Context, sel ast.SelectionSet, v *model.ResponseRespondInvitation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResponseRespondInvitation(ctx, sel, v)
}

func (ec *executionContext) marshalNResponseSubcribe2adsᚑmanagerᚋgraphᚋmodelᚐResponseSubcribe(ctx context.Context, sel ast.SelectionSet, v model.ResponseSubcribe) graphql.Marshaler {
	return ec._ResponseSubcribe(ctx, sel, &v)
}

func (ec *executionContext) marshalNResponseSubcribe2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseSubcribe(ctx context.Context, sel ast.SelectionSet, v *model.ResponseSubcribe) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResponseSubcribe(ctx, sel, v)
}

func (ec *executionContext) marshalNResponseToggleAdsPacement2adsᚑmanagerᚋgraphᚋmodelᚐResponseToggleAdsPacement(ctx context.Context, sel ast.SelectionSet, v model.ResponseToggleAdsPacement) graphql.Marshaler {
	return ec._ResponseToggleAdsPacement(ctx, sel, &v)
}

func (ec *executionContext) marshalNResponseToggleAdsPacement2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseToggleAdsPacement(ctx context.Context, sel ast.SelectionSet, v *model.ResponseToggleAdsPacement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResponseToggleAdsPacement(ctx, sel, v)
}

func (ec *executionContext) marshalNSimpleAdsAccount2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐSimpleAdsAccount(ctx context.Context, sel ast.SelectionSet, v []*model.SimpleAdsAccount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSimpleAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐSimpleAdsAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNSimpleAdsAccount2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐSimpleAdsAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SimpleAdsAccount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSimpleAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐSimpleAdsAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSimpleAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐSimpleAdsAccount(ctx context.Context, sel ast.SelectionSet, v *model.SimpleAdsAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SimpleAdsAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNSpecialProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐSpecialProperty(ctx context.Context, sel ast.SelectionSet, v []*model.SpecialProperty) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSpecialProperty2ᚖadsᚑmanagerᚋgraphᚋmodelᚐSpecialProperty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2adsᚑmanagerᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖadsᚑmanagerᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖadsᚑmanagerᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNpropertiesUpdate2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐPropertiesUpdateᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PropertiesUpdate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNpropertiesUpdate2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPropertiesUpdate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNpropertiesUpdate2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPropertiesUpdate(ctx context.Context, sel ast.SelectionSet, v *model.PropertiesUpdate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._propertiesUpdate(ctx, sel, v)
}

func (ec *executionContext) marshalOAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccount(ctx context.Context, sel ast.SelectionSet, v *model.AdsAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdsAccount(ctx, sel, v)
}

func (ec *executionContext) marshalOAdsAccountInvitation2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountInvitation(ctx context.Context, sel ast.SelectionSet, v *model.AdsAccountInvitation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdsAccountInvitation(ctx, sel, v)
}

func (ec *executionContext) marshalOAdsAccountMember2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountMemberᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdsAccountMember) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdsAccountMember2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsAccountMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContent(ctx context.Context, sel ast.SelectionSet, v *model.AdsContent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdsContent(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAdsContentsFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsContentsFilter(ctx context.Context, v interface{}) (*model.AdsContentsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAdsContentsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAdsPlacement2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacementᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdsPlacement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdsPlacement2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAdsPlacement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudience(ctx context.Context, sel ast.SelectionSet, v *model.Audience) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Audience(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAudienceFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐAudienceFilter(ctx context.Context, v interface{}) (*model.AudienceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAudienceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOBusiness2ᚖadsᚑmanagerᚋgraphᚋmodelᚐBusiness(ctx context.Context, sel ast.SelectionSet, v *model.Business) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Business(ctx, sel, v)
}

func (ec *executionContext) marshalOCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Campaign) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaign(ctx context.Context, sel ast.SelectionSet, v *model.Campaign) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Campaign(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCampaignsFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐCampaignsFilter(ctx context.Context, v interface{}) (*model.CampaignsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCampaignsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOHistorySpending2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐHistorySpending(ctx context.Context, sel ast.SelectionSet, v []*model.HistorySpending) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHistorySpending2ᚖadsᚑmanagerᚋgraphᚋmodelᚐHistorySpending(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHistorySpending2ᚖadsᚑmanagerᚋgraphᚋmodelᚐHistorySpending(ctx context.Context, sel ast.SelectionSet, v *model.HistorySpending) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HistorySpending(ctx, sel, v)
}

func (ec *executionContext) marshalOHistoryTopup2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐHistoryTopup(ctx context.Context, sel ast.SelectionSet, v []*model.HistoryTopup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHistoryTopup2ᚖadsᚑmanagerᚋgraphᚋmodelᚐHistoryTopup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHistoryTopup2ᚖadsᚑmanagerᚋgraphᚋmodelᚐHistoryTopup(ctx context.Context, sel ast.SelectionSet, v *model.HistoryTopup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HistoryTopup(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInputAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputAdsContent(ctx context.Context, v interface{}) (*model.InputAdsContent, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputAdsContent(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputAudience(ctx context.Context, v interface{}) (*model.InputAudience, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputAudience(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputCampaign(ctx context.Context, v interface{}) (*model.InputCampaign, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputCampaign(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputId2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputIDᚄ(ctx context.Context, v interface{}) ([]*model.InputID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.InputID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInputId2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInputPlacementContent2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputPlacementContentᚄ(ctx context.Context, v interface{}) ([]*model.InputPlacementContent, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.InputPlacementContent, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInputPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputPlacementContent(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInputPlacementContentDirect2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputPlacementContentDirect(ctx context.Context, v interface{}) (*model.InputPlacementContentDirect, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputPlacementContentDirect(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputQueryAdsBalance2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputQueryAdsBalance(ctx context.Context, v interface{}) (*model.InputQueryAdsBalance, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputQueryAdsBalance(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputSpecialProperty2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐInputSpecialPropertyᚄ(ctx context.Context, v interface{}) ([]*model.InputSpecialProperty, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.InputSpecialProperty, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInputSpecialProperty2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputSpecialProperty(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInputTopup2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputTopup(ctx context.Context, v interface{}) (*model.InputTopup, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputTopup(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputUpdateAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputUpdateAdsContent(ctx context.Context, v interface{}) (*model.InputUpdateAdsContent, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputUpdateAdsContent(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputUpdateAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputUpdateAudience(ctx context.Context, v interface{}) (*model.InputUpdateAudience, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputUpdateAudience(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputUpdateCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputUpdateCampaign(ctx context.Context, v interface{}) (*model.InputUpdateCampaign, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputUpdateCampaign(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputUpdatePlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐInputUpdatePlacementContent(ctx context.Context, v interface{}) (*model.InputUpdatePlacementContent, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputUpdatePlacementContent(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOPaymentDetail2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPaymentDetail(ctx context.Context, sel ast.SelectionSet, v *model.PaymentDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentDetail(ctx, sel, v)
}

func (ec *executionContext) marshalOPlacementContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐPlacementContent(ctx context.Context, sel ast.SelectionSet, v *model.PlacementContent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PlacementContent(ctx, sel, v)
}

func (ec *executionContext) unmarshalORangeFilter2ᚖadsᚑmanagerᚋgraphᚋmodelᚐRangeFilter(ctx context.Context, v interface{}) (*model.RangeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRangeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOResponseAdsAudience2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsAudienceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ResponseAdsAudience) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResponseAdsAudience2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsAudience(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOResponseAdsCampaign2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsCampaignᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ResponseAdsCampaign) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResponseAdsCampaign2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsCampaign(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOResponseAdsContent2ᚕᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsContentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ResponseAdsContent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResponseAdsContent2ᚖadsᚑmanagerᚋgraphᚋmodelᚐResponseAdsContent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSimpleAdsAccount2ᚖadsᚑmanagerᚋgraphᚋmodelᚐSimpleAdsAccount(ctx context.Context, sel ast.SelectionSet, v *model.SimpleAdsAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SimpleAdsAccount(ctx, sel, v)
}

func (ec *executionContext) marshalOSpecialProperty2ᚖadsᚑmanagerᚋgraphᚋmodelᚐSpecialProperty(ctx context.Context, sel ast.SelectionSet, v *model.SpecialProperty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SpecialProperty(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖadsᚑmanagerᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
